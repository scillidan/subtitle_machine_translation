1
00:00:16,511 --> 00:00:17,510
科尔顿·奥格登：好的 
COLTON OGDEN: All right.

2
00:00:17,510 --> 00:00:18,510
大家晚上好 
Good evening, everybody.

3
00:00:18,510 --> 00:00:19,600
欢迎回到GD50 
Welcome back to GD50.

4
00:00:19,600 --> 00:00:21,040
这是第六讲 
This is lecture six.

5
00:00:21,040 --> 00:00:23,980
今天 我们将冒险走出8位世界
And today we're going to be venturing out of the 8-bit world

6
00:00:23,980 --> 00:00:26,350
回到一个更现代的游戏时代 
and back into a more modern era of gaming.

7
00:00:26,350 --> 00:00:28,432
今天我们要谈论的是《愤怒的小鸟》 
We're talking about Angry Birds today.

8
00:00:28,432 --> 00:00:30,640
事实上 我对《愤怒的小鸟》有着非常美好的回忆 
I have pretty fond memories of Angry Birds, actually.

9
00:00:30,640 --> 00:00:33,640
这是我记忆中的第一款手机游戏
It was the first mobile game that I remember

10
00:00:33,640 --> 00:00:38,870
在那里我意识到移动设备实际上是一个可行的游戏平台 
playing where I realized that mobile was actually a viable platform for gaming.

11
00:00:38,870 --> 00:00:42,100
我想 早在2009年 也就是它第一次发行的时候 我就玩过了 
I played it, I think, back in 2009, was when it was first released.

12
00:00:42,100 --> 00:00:43,440
我真的很享受 
And I really enjoyed it.

13
00:00:43,440 --> 00:00:45,340
它有一个非常简单的公式 
It has a very simple formula.

14
00:00:45,340 --> 00:00:47,870
如果你不熟悉 我们的目标是你有
The goal, if you're unfamiliar, is you have

15
00:00:47,870 --> 00:00:52,030
你可以通过屏幕左侧的弹弓来控制鸟儿 
birds that you control by a sling shot on the left side of the screen.

16
00:00:52,030 --> 00:00:54,610
然后这些偷了你卵子的猪 
And then these pigs that have stolen your eggs,

17
00:00:54,610 --> 00:00:56,830
你在试图摧毁他们或杀死他们
you're trying to destroy them or kill them

18
00:00:56,830 --> 00:01:01,080
通过推倒他们用各种材料 木头 玻璃 
by knocking down their fortresses made out of various materials, wood, glass,

19
00:01:01,080 --> 00:01:02,195
金属 
metal.

20
00:01:02,195 --> 00:01:03,820
你会得到几种不同类型的鸟 
And you get a few different bird types.

21
00:01:03,820 --> 00:01:08,350
但它的大意是 基本上 只是把一只鸟扔进某种结构中 
But the gist of it is, basically, just sling shot a bird into some structure,

22
00:01:08,350 --> 00:01:09,280
把它打倒 
knock it down.

23
00:01:09,280 --> 00:01:12,850
以及整个潜在的机制
And the whole entire underlying mechanism

24
00:01:12,850 --> 00:01:15,130
因为事物是如何通过物理引擎工作的 
for how things work is via a physics engine,

25
00:01:15,130 --> 00:01:18,190
今天我们将在课程中讨论它 可能名为Box2D
which we'll talk about today in lecture, called Box2D Probably

26
00:01:18,190 --> 00:01:21,280
最普遍的2D物理引擎 
the most ubiquitous 2D physics engine.

27
00:01:21,280 --> 00:01:24,070
但这就是游戏的总体结构 
But that's the overall structure of the game.

28
00:01:24,070 --> 00:01:27,960
从字面上讲 就是把东西扔进建筑物里 把它们推倒 
It's literally just throwing things into structures, knocking them down.

29
00:01:27,960 --> 00:01:32,906
然后 触觉和有趣的游戏玩法造就了真正伟大的手机游戏 
And then that tactile and fun game play makes for really great mobile gaming.

30
00:01:32,906 --> 00:01:34,530
我以前也很喜欢这样的比赛 
And I enjoyed it a lot back in the day.

31
00:01:34,530 --> 00:01:38,980
这是第一部《愤怒的小鸟》第一关的截图 
This is a screenshot of the first level in the first Angry Birds, which

32
00:01:38,980 --> 00:01:41,410
我想大多数人可能都见过 
most people I think have probably seen.

33
00:01:41,410 --> 00:01:44,020
这是他们的一款新游戏中的一个样本 
This is a sample from one of their newer games.

34
00:01:44,020 --> 00:01:48,020
正如你所看到的 这里已经有了一个全新的层面 
As you can see, it's taken a whole new layer here.

35
00:01:48,020 --> 00:01:54,400
有石头和一堆错综复杂的结构和新生物
There's stone and a bunch of intricately varying structures and new creatures

36
00:01:54,400 --> 00:01:55,330
诸如此类的事情 
and stuff like that.

37
00:01:55,330 --> 00:01:57,996
比赛已经发生了很大的变化 但规则并没有改变 
The game has changed a lot, but the formula has stayed the same.

38
00:01:57,996 --> 00:02:02,250
今天 我们将探索这款游戏赖以运行的基础 
And today we'll explore the foundation of what makes this game work.

39
00:02:02,250 --> 00:02:04,960
而今天的话题 比平时要小一些 
And the topics today, a smaller than usual.

40
00:02:04,960 --> 00:02:09,009
但是Box2D 我们可以认为是一个相当大的话题 
But Box2D, we can consider as being a pretty large topic.

41
00:02:09,009 --> 00:02:11,200
我们将谈论Box2D 也就是物理学
We'll be talking about Box2D, which is the physics

42
00:02:11,200 --> 00:02:13,430
我们将在今天的课程中使用发动机 
engine we'll be using today in lecture.

43
00:02:13,430 --> 00:02:16,674
还有通过Love2D 它有自己的Box2D包装器 
And via Love2D, which has its own wrapper for Box2D.

44
00:02:16,674 --> 00:02:19,840
我们还将讨论鼠标输入 这是您还没有真正了解到的
And we'll also talk a little bit about mouse input, which you haven't really

45
00:02:19,840 --> 00:02:20,560
做了很多事 
done a lot.

46
00:02:20,560 --> 00:02:23,680
但这是非常恰当的 特别是在手机游戏的背景下 
But it's very apt, especially in the context of mobile gaming.

47
00:02:23,680 --> 00:02:28,960
因为鼠标输入和触摸输入是同义词 
Because mouse input and touch input are synonymous.

48
00:02:28,960 --> 00:02:30,460
但首先 让我们来看一段演讲演示 
But first, let's get a lecture demo.

49
00:02:30,460 --> 00:02:34,750
如果我们有一位志愿者上台展示
If we have a volunteer come up on stage to showcase

50
00:02:34,750 --> 00:02:35,990
我在这里所做的一切 
what I've put together here.

51
00:02:35,990 --> 00:02:38,395
所以让我确保我在这里的目录中是正确的 
So let me make sure I'm in the right directory here.

52
00:02:42,960 --> 00:02:45,220
因此 只要您准备好了 就继续并按Enter键 
So whenever you're ready, go ahead and press Enter.

53
00:02:49,450 --> 00:02:54,727
这是我放在一起的一个小演示 用来演示我们将
So this is a little demo I put together to demonstrate the concepts we'll

54
00:02:54,727 --> 00:02:55,810
在课堂上谈论今天 
talk about today in class.

55
00:02:55,810 --> 00:02:57,700
这只是开始屏幕 但它已经
This is just the Start screen, but it already

56
00:02:57,700 --> 00:03:02,950
显示了代表一群方形外星人的Box2D 它
shows Box2D representing a bunch of these square shaped aliens, which

57
00:03:02,950 --> 00:03:05,880
我们实际上将成为我们在游戏中试图瞄准的目标 
we'll actually be what we're trying to target in the game.

58
00:03:05,880 --> 00:03:08,740
但请注意 它们都坠落了 并有自己的碰撞
But notice that they all fell and had their own collision

59
00:03:08,740 --> 00:03:12,970
以及它们自己的物理过程 我不必手动编写代码
and their own physics that took place, and I didn't have to manually code

60
00:03:12,970 --> 00:03:14,290
旋转和诸如此类的东西 
rotation and stuff like this.

61
00:03:14,290 --> 00:03:17,539
这些都是Box2D为我们打理的东西 
This is all stuff that Box2D takes care of for us.

62
00:03:17,539 --> 00:03:19,330
我们很快就会看到它被用来产生巨大的效果 
And we'll see it used to great effect soon.

63
00:03:19,330 --> 00:03:20,960
如果你继续点击屏幕上的任何地方 
If you go ahead and just click anywhere on the screen,

64
00:03:20,960 --> 00:03:22,970
我们将进入比赛的主要部分 
we'll go to the main part of the game.

65
00:03:22,970 --> 00:03:26,422
这是《愤怒的小鸟》的一个非常简单的描述 
So this is a very simple representation of what Angry Birds is.

66
00:03:26,422 --> 00:03:28,130
您从屏幕的左侧开始 
You start on the left side of the screen.

67
00:03:28,130 --> 00:03:29,880
你有一只鸟 在这种情况下是外星人 我们
You have a bird, in this case an alien, we

68
00:03:29,880 --> 00:03:33,100
使用了一个使用外星人而不是鸟类的免费艺术包 
used a free art pack that uses aliens instead of birds,

69
00:03:33,100 --> 00:03:34,540
但这是同一个概念 
but it's the same concept.

70
00:03:34,540 --> 00:03:36,487
你有一个外星人 你可以点击和拖动 
You have an alien that you can click and drag.

71
00:03:36,487 --> 00:03:38,320
因此 如果您单击它 然后四处拖动 您就可以
So if you click it and then drag around, you

72
00:03:38,320 --> 00:03:43,070
可以看到当你松开鼠标时你将拥有的轨迹 
can see the trajectory that you'll have when you let go of the mouse.

73
00:03:43,070 --> 00:03:46,840
所以我们通过这些紫色的圆圈来模拟它的去向 
So we're simulating where it's going to go via these purple circles.

74
00:03:46,840 --> 00:03:50,605
然后《愤怒的小鸟》的目标是把小鸟扔进 
And then the goal in Angry Birds is to throw the bird into,

75
00:03:50,605 --> 00:03:53,980
或者外星人 进入守卫着猪的堡垒 
or the alien, into the fortress guarding the pigs,

76
00:03:53,980 --> 00:03:56,170
或者在这种情况下 是方形的外星人 
or in this case, square shaped aliens.

77
00:03:56,170 --> 00:03:59,086
因此 如果您继续 只需松开鼠标即可将鸟发射出去
So if you go ahead and just launch the bird by letting go of the mouse

78
00:03:59,086 --> 00:04:00,124
你终究会明白的 
you'll see.

79
00:04:00,124 --> 00:04:00,790
哦 又来了 
Oh, there we go.

80
00:04:00,790 --> 00:04:02,980
然后我们推倒了 
And we knocked down the.

81
00:04:02,980 --> 00:04:04,330
好的 
OK.

82
00:04:04,330 --> 00:04:08,890
事情是这样的 我们把外星人射进了建筑里 
What happened was we shot the alien into the structure.

83
00:04:08,890 --> 00:04:16,360
它摧毁了守卫另一个外星人的一块木块 
It destroyed one of the wooden blocks guarding the other alien.

84
00:04:16,360 --> 00:04:19,540
然后 这一切一发生 顶部的盒子 
And then, as soon as that happened, the top box,

85
00:04:19,540 --> 00:04:23,590
因为这些都是通过Box2D的物理引擎模拟的 
because these are all being simulated via Box2D's physics engine,

86
00:04:23,590 --> 00:04:27,190
另一个盒子被检测为不受支持 
that other box was detected as being unsupported.

87
00:04:27,190 --> 00:04:29,290
所以它掉了下来 撞到了另一个外星人 
So it fell down, it hit the other alien.

88
00:04:29,290 --> 00:04:31,960
我们已经对它进行了编码 这样当发生碰撞时
And we've coded it so that when a collision occurs

89
00:04:31,960 --> 00:04:35,950
在障碍物和速度足够快的外星人之间 
between an obstacle and our alien of sufficient speed,

90
00:04:35,950 --> 00:04:37,060
它应该会杀死外星人 
it should kill the alien.

91
00:04:37,060 --> 00:04:38,800
这就是《愤怒的小鸟》的工作原理 
Which is how it works in Angry Birds.

92
00:04:38,800 --> 00:04:40,210
所以如果你愿意再试一次 
So if you'll try it again.

93
00:04:40,210 --> 00:04:42,470
这一次 我们同时击中了这两个目标 
And this time we hit both of those at the same time.

94
00:04:42,470 --> 00:04:44,890
因此 它引发了这两个被删除的消息 
So it triggered both of those being deleted.

95
00:04:44,890 --> 00:04:46,540
但这家伙还活着 
But this guy is still alive.

96
00:04:46,540 --> 00:04:50,110
所以在它停止运动后 这类似于如何
So after it stops moving, which is similar to how

97
00:04:50,110 --> 00:04:54,430
它表现在最初的游戏中 它会让我们再次尝试射击 
it behaves in the original game, it's going to let us try again to shoot.

98
00:04:54,430 --> 00:04:57,440
所以如果我们再试一次 
So if we try one more time.

99
00:04:57,440 --> 00:05:00,800
然后我们发射并击中它 我们杀死它 然后我们就取得了胜利 
And then we launch and hit it, we kill it and then we get a victory.

100
00:05:00,800 --> 00:05:04,690
这就是《愤怒的小鸟》的整体基础 
So that's the overall underlying foundation for what Angry Birds is.

101
00:05:04,690 --> 00:05:06,850
显然 我们使用的是一个非常简单的表示法 
Obviously we're using a very simple representation.

102
00:05:06,850 --> 00:05:09,340
它不像《愤怒的小鸟》那样有太多的装饰 
It doesn't have a lot of the frill that Angry Birds does.

103
00:05:09,340 --> 00:05:13,000
但我们可以很容易地在此基础上创建一个完全充实的
But we could easily build upon this and create a fully fleshed out

104
00:05:13,000 --> 00:05:14,811
这款游戏与《愤怒的小鸟》非常相似 
game very similar to Angry Birds.

105
00:05:14,811 --> 00:05:15,560
所以谢谢你 史蒂文 
So thanks, Steven.

106
00:05:15,560 --> 00:05:17,300
我很感谢你的示范 
I appreciate the demonstration.

107
00:05:25,800 --> 00:05:26,880
这就是我们今天的目标 
So that's our goal today.

108
00:05:26,880 --> 00:05:33,540
我们将讨论如何构建一个非常基本但功能强大的模拟
We'll be talking about how to construct a very basic but functional simulation

109
00:05:33,540 --> 00:05:35,610
《愤怒的小鸟》的核心是什么 
of what Angry Birds is at its core.

110
00:05:35,610 --> 00:05:38,760
这只是把东西扔进障碍物 摧毁它们 
Which is just flinging things into obstacles, destroying them,

111
00:05:38,760 --> 00:05:41,820
最终摧毁他们所保护的东西 
and ultimately destroying the things that they're protecting,

112
00:05:41,820 --> 00:05:46,364
外星人 基地游戏中的猪 
the aliens, the pigs that are in the base game.

113
00:05:46,364 --> 00:05:49,530
下面是我们将使用的不同精灵床单的快照
So here's a shot of what the different sprite sheets we're going to be using

114
00:05:49,530 --> 00:05:50,250
是 
are.

115
00:05:50,250 --> 00:05:53,730
我从《开放游戏艺术》上学到了一张很棒的精灵单子 
There's a really great sprite sheet that I got off of Open Game Art.

116
00:05:53,730 --> 00:05:54,690
肯尼是艺术家 
Kenny is the artist.

117
00:05:54,690 --> 00:05:56,040
他创作了很多伟大的艺术作品 
He makes a lot of great art.

118
00:05:56,040 --> 00:05:58,260
如果你注意到了 它看起来很像艺术
If you notice, it's very similar looking to the art

119
00:05:58,260 --> 00:06:01,020
我们在马里奥的演讲中用到的 
that we use in the Mario lecture.

120
00:06:01,020 --> 00:06:02,520
实际上 是同一个艺术家 
Actually, it's the same artist.

121
00:06:02,520 --> 00:06:06,210
所以 如果你在寻找资产 他有一大堆了不起的资产
So if you're ever looking for assets, he's got a ton of awesome assets

122
00:06:06,210 --> 00:06:07,200
关于开放游戏艺术 
on open game art.

123
00:06:07,200 --> 00:06:10,110
所以我们有一组外星人 方形和圆形的 
So we have a set of aliens, square and round shaped.

124
00:06:10,110 --> 00:06:14,130
我武断地决定 我们把圆形的外星人做成鸟 
I decided just arbitrarily we made the round shaped aliens the birds.

125
00:06:14,130 --> 00:06:17,880
所以我们把它们射入结构中
So we shoot those into the structures that are

126
00:06:17,880 --> 00:06:19,380
保护正方形的外星人 
protecting the square shaped aliens.

127
00:06:19,380 --> 00:06:23,662
在这种情况下 正方形的外星人将是坏人 
The square shape aliens will be the bad guys in this case.

128
00:06:23,662 --> 00:06:26,620
然后我们有另一张精灵纸在下面的左边 
And then we have another sprite sheet down here below on the left side.

129
00:06:26,620 --> 00:06:30,360
只是 我用这里的瓷砖做了一个地面元素 
Which just, I used the tile here just to make a ground element.

130
00:06:30,360 --> 00:06:33,510
剩下的这些你可以很容易地包括在游戏中 如果你想的话 
The rest of these you could easily include in the game if you wanted to,

131
00:06:33,510 --> 00:06:36,060
但我们只是在使用这里的地面 
but we're only using the ground here.

132
00:06:36,060 --> 00:06:38,400
然后注意这里 我们有一个很大的精灵纸
And then notice here, we have this large sprite sheet

133
00:06:38,400 --> 00:06:42,930
它有一堆不同形状和大小的材料 
which has a bunch of different shapes and sizes of materials.

134
00:06:42,930 --> 00:06:47,040
整个精灵薄片都有金属、炸药和玻璃薄片 
The whole sprite sheet comes with metal and explosive and glass sheets as well.

135
00:06:47,040 --> 00:06:49,500
但为了简单起见 我们只使用这里的木头 
But just for simplicity we only use the wood here.

136
00:06:49,500 --> 00:06:53,190
但请注意 我们有完整的部件
But notice that we have entirely whole pieces

137
00:06:53,190 --> 00:06:55,470
然后我们有部分被摧毁的碎片
and then we have pieces that are partially destroyed

138
00:06:55,470 --> 00:06:57,120
然后是中空的碎片 
and then pieces that are hollow.

139
00:06:57,120 --> 00:07:00,540
您可以很容易地在游戏中对所有这些进行建模并使用它们 
You could easily model all of these in your game and use them.

140
00:07:00,540 --> 00:07:04,200
但我们只决定使用其中的几个 
But we only decided to use just a couple of these,

141
00:07:04,200 --> 00:07:07,020
只有水平的和垂直的
which was just the horizontal and the vertical ones that

142
00:07:07,020 --> 00:07:09,630
是完全完整的 
are completely whole.

143
00:07:09,630 --> 00:07:14,370
不幸的是 它们的系统布局并不完全相同
These, unfortunately, don't have quite the same systematic layout

144
00:07:14,370 --> 00:07:16,170
就像我们以前用过的精灵 
as the sprites that we used before.

145
00:07:16,170 --> 00:07:18,820
它们不是均匀分布在网格中的 
They're not laid out in a grid evenly spaced.

146
00:07:18,820 --> 00:07:22,740
所以在这种情况下 在util dotLua中 我最终很难
So in this case, in util dot Lua, I ended up hard

147
00:07:22,740 --> 00:07:26,160
对不同的XY宽度和高度四元组进行编码
coding the different XY width and height quads

148
00:07:26,160 --> 00:07:29,160
对于其中的每一个 这是你在一种情况下必须做的
for each of these, which is what you have to do in a situation

149
00:07:29,160 --> 00:07:31,780
在这里 你不是在与瓷砖本身互动 
where you're interacting not with tiles per se,

150
00:07:31,780 --> 00:07:33,960
但有了更多有机形状的物体 
but with more organic shaped objects.

151
00:07:33,960 --> 00:07:36,390
所以它可能需要更多的时间才能结束
So it can take a little more time to end up

152
00:07:36,390 --> 00:07:39,205
为您的对象构建所有四边形
constructing all of the quads for your objects

153
00:07:39,205 --> 00:07:40,830
当你有这样一张精灵床单的时候 
when you have a sprite sheet like this.

154
00:07:40,830 --> 00:07:43,560
但是 幸运的是 你只需要做一次 
But, fortunately, you only have to do it once.

155
00:07:43,560 --> 00:07:46,890
在我们开始讨论Box2D是什么之前 这里有一些有用的链接
Here's a few useful links before we get started in talking about what Box2D is

156
00:07:46,890 --> 00:07:50,190
以及如何使用它 以及它基本上是如何被称为爱情圆点的
and how to use it, and basically how it's called love dot

157
00:07:50,190 --> 00:07:52,670
物理学 有效地 在爱的2D中 
physics, effectively, in love2D.

158
00:07:52,670 --> 00:07:56,325
前两个链接是LOVE 2D的文档 
The first two links are documentation for love 2D,

159
00:07:56,325 --> 00:07:58,950
我们将要讨论的函数和对象是什么 
what the functions and objects are that we'll be talking about.

160
00:07:58,950 --> 00:08:01,324
还有一个简单的教程 讲述了如何制造一个球
And a simple tutorial that talks about how to make a ball

161
00:08:01,324 --> 00:08:05,070
使用Box2D在爱情2D中弹跳 
bounce in love 2D using Box2D.

162
00:08:05,070 --> 00:08:07,950
第三个是我实际使用的一个很好的资源
The third is a great resource that I used actually

163
00:08:07,950 --> 00:08:11,250
要了解我对Box2D的大部分了解 特别是
to learn most of what I know about Box2D, especially

164
00:08:11,250 --> 00:08:13,984
在这堂课的背景下 
in the context of this lecture.

165
00:08:13,984 --> 00:08:15,900
所以它谈到了很多不同的概念 
So it talks about a lot of different concepts.

166
00:08:15,900 --> 00:08:17,290
它谈到了我们将要讨论的所有事情 
It talks about all the things that we'll be talking about.

167
00:08:17,290 --> 00:08:19,710
然后 它将更详细地介绍如何
And then it goes into a lot more detail about how

168
00:08:19,710 --> 00:08:24,540
你可以着手建造很多非常酷、很疯狂的东西 比如坦克
you can go about constructing a lot of really cool, crazy things like tanks

169
00:08:24,540 --> 00:08:27,150
滑轮和一大堆不同的东西
and pulleys and a whole bunch of different things

170
00:08:27,150 --> 00:08:30,030
如果您正在寻找潜在的
that are worth looking into if you're looking into potentially making

171
00:08:30,030 --> 00:08:31,230
一款基于物理的游戏 
a physics based game.

172
00:08:31,230 --> 00:08:35,429
显然 我们不会在这里讨论这种复杂的事情 
Obviously we won't be going into things of that complexity here.

173
00:08:35,429 --> 00:08:37,169
但你可以用Box2D很容易地做到这一点 
But you could easily do it with Box2D.

174
00:08:37,169 --> 00:08:40,350
这使得这一点非常非常有可能 
It makes it very, very possible.

175
00:08:40,350 --> 00:08:43,620
所以我们要谈的第一件事
So the very first thing that we should talk

176
00:08:43,620 --> 00:08:47,100
关于我们什么时候想要构建一个游戏或模拟 
about when we want to construct a game, or simulation,

177
00:08:47,100 --> 00:08:50,490
或者无论我们想做什么 使用Box2D是我们
or whatever we want to do, with Box2D is we

178
00:08:50,490 --> 00:08:55,320
需要某种系统来为我们实际执行模拟 
need some sort of system that will actually perform the simulation for us.

179
00:08:55,320 --> 00:09:02,670
Box2D应用程序或游戏的基本核心是世界
And the fundamental core of what a Box2D app or game is, the core is the world

180
00:09:02,670 --> 00:09:03,280
对象 
object.

181
00:09:03,280 --> 00:09:06,780
所以有一个世界 你可以把它想象成你的世界
So there is a world that you can think of as sort of being your world,

182
00:09:06,780 --> 00:09:12,810
但它实际上是一台模拟所有部件的机器
but what it effectively is is a machine that simulates all of the pieces

183
00:09:12,810 --> 00:09:16,200
你已经告诉它在Box2D中相互作用 
that you've told it interact with each other in Box2D.

184
00:09:16,200 --> 00:09:20,310
因此 Box2D具有一组称为灯具和实体的对象 
So Box2D has a set of objects called fixtures and bodies.

185
00:09:20,310 --> 00:09:22,820
它们执行物理上的互动 
Those perform the physical interactions.

186
00:09:22,820 --> 00:09:25,650
全世界都有责任更新这些
And it's up to the world to update all of those

187
00:09:25,650 --> 00:09:28,680
并应用相关的力和物理计算
and apply the relevant forces and physics calculations

188
00:09:28,680 --> 00:09:32,450
解决碰撞和做各种事情 
that resolve collisions and do all sorts of things.

189
00:09:32,450 --> 00:09:35,487
Box2D为我们和世界所做的一切
All of the things that Box2D does for us, the world

190
00:09:35,487 --> 00:09:36,570
会帮我们解决这件事
takes care of this for us.

191
00:09:36,570 --> 00:09:40,050
所以我们不需要手动检查和更新每一个对象
So we don't have to manually go through and update every single object

192
00:09:40,050 --> 00:09:43,020
我们之前做过的 并检查碰撞 
with its velocity that we've done before and check for collisions.

193
00:09:43,020 --> 00:09:45,240
世界为我们做了这些 并解决了这些问题 
The world does this for us, and resolves them

194
00:09:45,240 --> 00:09:48,120
基于我们如何告诉它去解决它们 
based on how we tell it to resolve them.

195
00:09:48,120 --> 00:09:51,120
这个世界也拥有 就像一个真实的世界
And the world also possesses, like an actual world

196
00:09:51,120 --> 00:09:53,730
重力在x轴和y轴上 
would, gravity on the x and y-axis.

197
00:09:53,730 --> 00:09:57,630
在这个例子中 重力作用在y轴上 
In this case, we have gravity applied on the y-axis going down,

198
00:09:57,630 --> 00:09:59,820
所以它是正值
so it's a positive value.

199
00:09:59,820 --> 00:10:03,420
我们在这个发行版中将其设置为300 但您可以将其设置为任何您想要的值 
We set it to 300 in this distro, but you can set it to whatever you want.

200
00:10:03,420 --> 00:10:05,610
设定一个较低的重力会产生这样的效果
Setting a lower gravity would have the effect

201
00:10:05,610 --> 00:10:08,110
让我们感觉像是在月球上
of making it feel like we're on the moon or something.

202
00:10:08,110 --> 00:10:10,110
感觉我们在另一个星球 
Making it feel like we're on a different planet.

203
00:10:10,110 --> 00:10:11,276
原来世界就是这样 
So that's what the world is.

204
00:10:11,276 --> 00:10:12,650
世界模拟一切 
The world simulates everything.

205
00:10:12,650 --> 00:10:14,400
我们在这里讲几个术语
And we'll go through just a few terms here

206
00:10:14,400 --> 00:10:15,990
在我们看一些源代码之前 
before we look at some source code.

207
00:10:15,990 --> 00:10:20,250
但在我们真正理解
But there's a few terms that we need to understand before we can really

208
00:10:20,250 --> 00:10:22,930
了解Box2D在做什么 
understand what Box2D is doing.

209
00:10:22,930 --> 00:10:26,490
这是我们用来在love2D中创建一个新世界的函数 
And this is the function that we use to create a new world in love2D.

210
00:10:26,490 --> 00:10:29,730
很简单 爱点物理点新世界 
Very simple, love dot physics dot new world.

211
00:10:29,730 --> 00:10:33,510
这个爱点物理学只是一个命名空间 
And this love dot physics is just a name space that

212
00:10:33,510 --> 00:10:41,410
封装了love2D可以访问的所有Box2D函数和对象 
encapsulates all of the Box2D functions and objects that love2D has access to.

213
00:10:41,410 --> 00:10:44,220
所以你在爱点物理学中看到的任何东西
So anything that you see in love dot physics is effectively

214
00:10:44,220 --> 00:10:47,100
Box2D的包装器 
a wrapper for Box2D.

215
00:10:47,100 --> 00:10:51,330
为了澄清Box2D Box2D只是一个用C++编写的库
And to clarify about Box2D, Box2D is just a library that's written in C++

216
00:10:51,330 --> 00:10:54,240
你可以在任何你想插入的地方插入 
that you can plug-in pretty much anywhere you want to.

217
00:10:54,240 --> 00:10:58,080
Unity使用它 实际上 大多数2D游戏引擎都使用它 
Unity uses it and, actually, most 2D game engines

218
00:10:58,080 --> 00:11:03,420
包括Live GDX 这是一个非常大的Java
that I've ever seen including Live GDX, for example, which is a very large Java

219
00:11:03,420 --> 00:11:05,880
2D游戏框架使用Box2D 
2D game framework uses Box2D.

220
00:11:05,880 --> 00:11:07,920
你可以在任何地方使用它 
You can use it anywhere.

221
00:11:07,920 --> 00:11:11,640
在这种情况下 我们使用love2D自己的包装器 
In this case we're using love2D's own wrapper for it.

222
00:11:11,640 --> 00:11:15,270
所以创造爱情2D的人 他们采用了Box2D
So the people that created love 2D, they took Box2D

223
00:11:15,270 --> 00:11:17,490
然后他们只需要把一组Lua函数
and then they just put a bunch of Lua functions

224
00:11:17,490 --> 00:11:19,650
围绕着它们 围绕着所有的对象和功能
around them, around all the objects and functions

225
00:11:19,650 --> 00:11:22,620
以使其可以在相同的样式中使用
to make it possible to use it in the same style

226
00:11:22,620 --> 00:11:24,592
我们使用框架的其余部分 
that we use the rest of the framework.

227
00:11:24,592 --> 00:11:26,050
这就是你创造一个新世界的方式 
This is how you create a new world.

228
00:11:26,050 --> 00:11:29,310
这是使Box2D模拟工作的第一步 
This is the first step in getting your Box2D simulation working.

229
00:11:29,310 --> 00:11:32,460
那么 到目前为止 我们对如何实现这一目标有什么问题吗？
So any questions so far as to how we can get that going?

230
00:11:32,460 --> 00:11:34,050
好的 
OK.

231
00:11:34,050 --> 00:11:39,240
因此 超越世界对象 这是基础 某种程度上搭建了我们的舞台 
So beyond the world object, which is the foundation, sort of sets up our stage,

232
00:11:39,240 --> 00:11:42,540
你可以把它想象成我们的舞台 我们需要身体
you can think of it as our stage, we need bodies

233
00:11:42,540 --> 00:11:44,770
才能真正地相互影响 
to actually interact with each other.

234
00:11:44,770 --> 00:11:47,880
所以身体只是一个抽象的容器 
So a body is just an abstract container.

235
00:11:47,880 --> 00:11:52,650
它基本上保持着一个位置和一个速度 
It basically holds a position and a velocity.

236
00:11:52,650 --> 00:11:56,190
你通过所谓的固定装置将东西固定在它上面
And you attach things to it via what are called fixtures

237
00:11:56,190 --> 00:12:00,612
它允许你给身体一个形状 因此是一个碰撞框 
that allow you to give the body a shape, and therefore a collision box,

238
00:12:00,612 --> 00:12:02,820
从而允许它与其他事物相互作用 
and therefore allow it to interact with other things.

239
00:12:02,820 --> 00:12:07,590
但身体本质上是场景中所有不同的东西相互作用
But a body is essentially all the disparate things in your scene interact

240
00:12:07,590 --> 00:12:09,510
彼此在一起 四处走动 
with each other and move around.

241
00:12:09,510 --> 00:12:14,160
因此 为了创造一个新的身体 我们只是喜欢点物理 点新的身体 
And so to create a new body we just do love dot physics dot new body.

242
00:12:14,160 --> 00:12:17,610
我们在这个世界上走过 所以当我们这样做的时候 
We pass in the world, so therefore when we do this,

243
00:12:17,610 --> 00:12:19,950
现在 全世界都提到了这个机构 
the world has a reference to this body now.

244
00:12:19,950 --> 00:12:22,440
每次我们呼吁更新我们的世界 这是
And every time we call update on our world, which

245
00:12:22,440 --> 00:12:25,230
我们会在源代码中看到 它会知道 好的 
we'll see in the source code, it will know, OK,

246
00:12:25,230 --> 00:12:29,280
我有这个机构的参考资料 进行所有相关的检查
I have a reference to this body, perform all of the relevant checks

247
00:12:29,280 --> 00:12:33,660
关于该车身及其所包含的所有夹具的碰撞 
on the collision for that body and all the fixtures that it contains.

248
00:12:33,660 --> 00:12:38,770
更新其位置、更新速度等 
Update its position, updates velocity, and so forth.

249
00:12:38,770 --> 00:12:41,700
不仅是一个世界 而且还有一个x和y 
And not only a world, but it also gets an x and a y,

250
00:12:41,700 --> 00:12:45,900
这将把它放在实例化的世界中 
which will place it in the world on instantiation.

251
00:12:45,900 --> 00:12:48,970
这里的最后一个参数是输入 
The last parameter here, type.

252
00:12:48,970 --> 00:12:51,330
有三种基本类型的物体
There are three fundamental types of bodies

253
00:12:51,330 --> 00:12:56,130
我们将在爱情中看到2D的、静态的、动态的和运动学的 
which we'll see in love 2D, static, dynamic, and kinematic.

254
00:12:56,130 --> 00:12:59,580
这基本上影响了它与其他物体的互动方式 
And that basically influences how it'll interact with the other objects,

255
00:12:59,580 --> 00:13:01,810
其他身体 在我们的场景中 
the other bodies, in our scene.

256
00:13:01,810 --> 00:13:04,860
所以我们有这个世界 它囊括了一切 
So we have the world, which encapsulates everything,

257
00:13:04,860 --> 00:13:06,900
所有的身体 所有的固定装置 
all the bodies, all the fixtures.

258
00:13:06,900 --> 00:13:10,380
然后我们有身体 这是我们游戏世界中的实体
And then we have the bodies, which are the entities in our game world

259
00:13:10,380 --> 00:13:14,310
它们有位置和速度
that have position and velocity, effectively.

260
00:13:14,310 --> 00:13:18,180
最后一个关键因素是
The last key ingredient here that will allow

261
00:13:18,180 --> 00:13:23,820
在我们的身体之间创造相互作用是固定的 
us to create interactions between the bodies that we have are fixtures.

262
00:13:23,820 --> 00:13:28,680
而夹具 夹具的全部 就是这个抽象的对象
And fixtures, all a fixture is, is this abstract object

263
00:13:28,680 --> 00:13:31,650
它可以让你把一个形状附加到一个物体上 
that will allow you to attach a shape to a body.

264
00:13:31,650 --> 00:13:34,740
所以身体是无形的 它们没有形状 
So bodies are shapeless by default. They don't have a shape.

265
00:13:34,740 --> 00:13:39,930
它们只是一个有效地具有位置速度的容器 
They are just a container that has position velocity, effectively.

266
00:13:39,930 --> 00:13:42,010
但它们不与其他任何东西相互作用 
But they don't interact with anything else.

267
00:13:42,010 --> 00:13:44,260
他们不知道如何与其他东西互动
And they don't know how to interact with anything else

268
00:13:44,260 --> 00:13:46,290
直到你给他们一个固定的 
until you give them a fixture.

269
00:13:46,290 --> 00:13:50,170
和夹具你会给身体和形状 
And the fixture you will give the body and a shape.

270
00:13:50,170 --> 00:13:52,860
比如说 如果你想要一只鸟
So for example, if you want the bird that we

271
00:13:52,860 --> 00:13:56,715
我们之前看到的外星人 圆形的外星人 我们为它创造了一个身体 
were looking at earlier, the alien, the round alien, we create a body for it

272
00:13:56,715 --> 00:13:59,880
在我们的世界里这还不意味着什么
in our world, which doesn't mean anything yet.

273
00:13:59,880 --> 00:14:03,810
但是我们说 我要给那个外星人装一个固定装置 
But we say, I'm going to attach a fixture to that alien.

274
00:14:03,810 --> 00:14:05,760
我要给它一个圆形 
I'm going to give it a circle shape.

275
00:14:05,760 --> 00:14:08,970
它就会知道无论何时进行任何计算 
And it'll then know whenever it performs any calculations,

276
00:14:08,970 --> 00:14:13,170
外星人应该和圆形物体互动
that that alien should interact with things as if it were round.

277
00:14:13,170 --> 00:14:16,410
从而触发基于圆形命中盒的碰撞 
And therefore trigger collisions based on a circular hitbox,

278
00:14:16,410 --> 00:14:21,180
而不是长方形或多边形的击中盒
as opposed to a rectangular or polygonal hitbox, as we'll see.

279
00:14:21,180 --> 00:14:24,390
固定装置 除了附加形状
Fixtures, in addition to attaching shapes

280
00:14:24,390 --> 00:14:27,300
到身体 这将 正如这里所说 影响
to bodies, which will, as said here, influence

281
00:14:27,300 --> 00:14:32,010
它们如何与其他物体碰撞 它们有密度 我们会看到 
how they collide with other bodies, they have density, which we'll see.

282
00:14:32,010 --> 00:14:34,110
所以密度大的物体
So that things with higher density obviously

283
00:14:34,110 --> 00:14:38,704
会下降得更快 或者不会下降得更快 但它们会影响事情 
will fall faster, or not fall faster, but they will influence things

284
00:14:38,704 --> 00:14:39,870
就像他们有更多的重量 
as if they have more weight.

285
00:14:39,870 --> 00:14:43,660
当它们与物体碰撞时 它们会把物体推得更远 
They will push things farther when they collide with them.

286
00:14:43,660 --> 00:14:46,110
他们也有摩擦 他们有恢复 
They also have friction and they have restitution.

287
00:14:46,110 --> 00:14:48,120
喘息是有弹性的 
Restitution is bounciness.

288
00:14:48,120 --> 00:14:51,810
所以如果有什么东西 如果我们有外星人 当它落地的时候 
So if something, if we had our alien, no restitution when it hits the ground

289
00:14:51,810 --> 00:14:53,590
它会失败的
it'll just fall flat.

290
00:14:53,590 --> 00:14:55,410
但如果我们给它更高的回报 
But if we give it a higher restitution it

291
00:14:55,410 --> 00:14:58,080
会在落地时反弹
will actually bounce when it hits the ground.

292
00:14:58,080 --> 00:15:02,380
因此与世界的互动略有不同 
And therefore interact with the world a little bit differently.

293
00:15:02,380 --> 00:15:08,000
因此 当我们想要一个固定装置 并将一个形状应用到身体上时 
So when we want to take a fixture and apply a shape to a body,

294
00:15:08,000 --> 00:15:09,750
我们可以有几种不同的形状
we have a few different shapes that we can

295
00:15:09,750 --> 00:15:12,930
适用于在2D爱中默认给予我们的爱 
apply to it that are given to us by default in love 2D.

296
00:15:12,930 --> 00:15:15,340
所以圆形 长方形 边形 
So circle shape, rectangle shape, edge shape.

297
00:15:15,340 --> 00:15:18,520
这些就是我们如何有效地定义
These are just, effectively, how we define how

298
00:15:18,520 --> 00:15:20,680
我们的身体与其他身体相互作用 
our bodies interact with other bodies.

299
00:15:20,680 --> 00:15:24,010
例如 如果它是圆形的东西
How, for example, if it's something that's circular

300
00:15:24,010 --> 00:15:26,680
当它沿着地面移动时 它应该滚动 
it should roll when it's moving along the ground.

301
00:15:26,680 --> 00:15:29,680
或者当它击中某物时 显然是在它的一角
Or when it hits something the corner obviously of it

302
00:15:29,680 --> 00:15:32,990
不会打到什么东西 因为它是圆角的 而不是
won't hit something because it's rounded, as opposed to something

303
00:15:32,990 --> 00:15:36,670
有一个方形的点击框 它会以一种略有不同的方式影响事情 
that has a square hit box, it'll affect things in a slightly different way.

304
00:15:36,670 --> 00:15:40,840
我们可以定义任意形状的点击框 这要归功于多边形 
And we can define arbitrarily shaped hit boxes, thanks to the polygon shape.

305
00:15:40,840 --> 00:15:45,560
例如 如果我们想要一个形状像五角形的东西 
If we want something to be shaped like a pentagon, for example,

306
00:15:45,560 --> 00:15:47,870
让它像这样滚来滚去 
and have it roll around and behave like such,

307
00:15:47,870 --> 00:15:51,730
我们可以通过一组顶点来定义一个多边形 
we can just define a polygon via a set of vertices.

308
00:15:51,730 --> 00:15:54,820
然后把它贴在身体上 它就会
And then affix that to a body and it will

309
00:15:54,820 --> 00:15:57,900
表现得好像它是五角形的 
behave as if it were pentagon shaped.

310
00:15:57,900 --> 00:16:00,280
这就是您将如何实例化 就像我们
And this is how you would instantiate just as we've

311
00:16:00,280 --> 00:16:03,940
看到了爱点物理点新世界和爱点物理点新身体 
seen with love dot physics dot new world and love dot physics dot new body,

312
00:16:03,940 --> 00:16:07,180
爱点物理点新的夹具以身体和形状 
love dot physics dot new fixture takes in a body and a shape,

313
00:16:07,180 --> 00:16:10,180
并将该形状应用到身体上 
and will apply that shape to the body.

314
00:16:10,180 --> 00:16:14,779
而在那之后的世界将确切地知道如何与事物碰撞 
And the world after that will know exactly how to collide with things.

315
00:16:14,779 --> 00:16:16,570
所以最后一件事 最后一张幻灯片
And so the last thing, the last slide we'll

316
00:16:16,570 --> 00:16:19,229
在我们开始查看源代码之前 请先看这里
look at here before we start looking at source code

317
00:16:19,229 --> 00:16:20,770
不同的体型是什么 
is what the different body types are.

318
00:16:20,770 --> 00:16:25,600
所以我之前提到过有三种不同的体型 静态的 动态的 
So I alluded to having three different body types before, static, dynamic,

319
00:16:25,600 --> 00:16:26,710
和运动学的 
and kinematic.

320
00:16:26,710 --> 00:16:32,080
因此 我们的世界中将存在一个静止的物体 但实际上不会受到重力的影响
So a static body will exist in our world but not actually be affected by gravity

321
00:16:32,080 --> 00:16:34,090
或者其他任何东西的碰撞 
or the collision of anything else.

322
00:16:34,090 --> 00:16:36,730
事物可以撞击它 然后弹出来 做它们自己的事情 
Things can hit it and bounce off of it and do their own thing,

323
00:16:36,730 --> 00:16:39,790
但静态的身体永远不会受到其他东西的影响 
but the static body will never be influenced by something else.

324
00:16:39,790 --> 00:16:43,817
它以某种永久结构的形式存在 几乎就像地面一样 
It exists as some sort of permanent structure, almost like the ground.

325
00:16:43,817 --> 00:16:46,900
你并不会通过移动和弹跳来影响地面 
You don't really affect the ground by moving into it and bouncing into it,

326
00:16:46,900 --> 00:16:49,360
除非你用足够的力
unless you do it with enough force.

327
00:16:49,360 --> 00:16:55,090
但是在我们的Box2D世界中 一个静态的身体不可能受到任何其他东西的影响 
But in our Box2D world, a static body cannot be influenced by anything else.

328
00:16:55,090 --> 00:16:57,770
动态的身体是相反的 
A dynamic body is the opposite.

329
00:16:57,770 --> 00:17:03,310
它具有Box2D的完整模拟 
It has the full simulation of Box2D.

330
00:17:03,310 --> 00:17:06,790
重力影响它 物体碰撞它 它会反弹 
Gravity affects it, things collide into it, it will bounce off of them.

331
00:17:06,790 --> 00:17:09,010
它会做你所期望的一个正常的身体做 
It'll do what you would expect a normal body to do.

332
00:17:09,010 --> 00:17:13,150
如果我在这个房间里扔一个球 它碰到了墙 这是一个动态物体 
If I throw a ball in this room and it hits the wall, it's a dynamic body.

333
00:17:13,150 --> 00:17:15,940
在这种情况下 墙壁是静态物体 
The walls are the static bodies in this case.

334
00:17:15,940 --> 00:17:19,720
运动体是两者的混合体 
And then a kinematic body is a hybrid between the two.

335
00:17:19,720 --> 00:17:24,109
它是一种可以移动 可以旋转和做一些事情的东西 
It's something that can move and can rotate and do things,

336
00:17:24,109 --> 00:17:28,400
但不受其他物体碰撞的影响 
but it's not influenced by other objects colliding with it.

337
00:17:28,400 --> 00:17:32,860
举个例子 如果我有一个平台 它不停地旋转 
So, for example, if I have a platform that's just spinning indefinitely,

338
00:17:32,860 --> 00:17:36,940
但它不受重力的影响 当我撞击它时 它不会移动 
but it's not being affected by gravity and it doesn't move when I hit it,

339
00:17:36,940 --> 00:17:38,170
这是一个运动体 
that's a kinematic body.

340
00:17:38,170 --> 00:17:42,400
它仍然在移动 它是半静态的 它影响着其他东西 
It's still moving and it's semi-static and it influences other things,

341
00:17:42,400 --> 00:17:43,660
但它不是纯粹的静态的 
but it's not purely static.

342
00:17:43,660 --> 00:17:47,197
它确实有一点行为可以授予它 
It does have a little bit of behavior that it can grant it.

343
00:17:47,197 --> 00:17:49,030
让我们继续看几个例子
So let's go ahead and look at a few examples

344
00:17:49,030 --> 00:17:53,030
现在来看看这在代码中是什么样子的 
now and see how this actually looks in code.

345
00:17:53,030 --> 00:17:56,380
所以我将进入一个例子 如果你在发行版中查找 
So I'm going to go into an example, if you're looking in the distro,

346
00:17:56,380 --> 00:17:58,600
有一个叫做静态的例子 
there is an example called static.

347
00:17:58,600 --> 00:18:02,227
我们来看看在我们的场景中 静态物体是什么样子的 
So we'll take a look here and see what a static body looks like in our scene.

348
00:18:02,227 --> 00:18:04,560
对于所有这些导致愤怒的小鸟的例子 
And for all of these examples leading up to Angry Birds,

349
00:18:04,560 --> 00:18:08,320
为了简单起见 我们将用形状来渲染所有东西 
we're just going to render everything with shapes for simplicity.

350
00:18:08,320 --> 00:18:14,350
但这是一个完整的Box2D世界 
But this, as anti-climactic as it is, is a full Box2D world

351
00:18:14,350 --> 00:18:17,020
只有一个静止的身体 
with just a single static body.

352
00:18:17,020 --> 00:18:19,410
就是这个正方形 白色的
And it's just this square here, colored white.

353
00:18:19,410 --> 00:18:21,620
静止的物体不动 什么也不做 
The static body doesn't move, it doesn't do anything.

354
00:18:21,620 --> 00:18:25,000
没有什么能影响它的动作或行为 
Nothing can influence how it moves or behaves.

355
00:18:25,000 --> 00:18:27,190
但它在我们的世界里是一个永久的固定装置 
But it exists in our world as a permanent fixture.

356
00:18:27,190 --> 00:18:30,370
如果我们有一个动态的物体 我们把它扔到一个动态的物体上 
And if we had dynamic bodies and we threw a dynamic body at it,

357
00:18:30,370 --> 00:18:32,770
比如说 动态物体会弹开 
for example, the dynamic body would bounce off,

358
00:18:32,770 --> 00:18:34,872
静止的物体将永久留在那里 
the static body would stay there permanently.

359
00:18:34,872 --> 00:18:36,580
让我们继续下去 看看是什么
So let's go ahead and take a look at what

360
00:18:36,580 --> 00:18:38,200
其源代码如下所示 
the source code looks like for that.

361
00:18:38,200 --> 00:18:42,820
所以我现在在静态文件的main点Lua中 
So I'm here in main dot Lua of our static file.

362
00:18:42,820 --> 00:18:46,630
就像我们以前看到的 我们需要找到一个世界 
And just as we've seen before, we needed to find a world.

363
00:18:46,630 --> 00:18:49,270
所以我在第45行有一个世界 
So I have a world here on line 45.

364
00:18:49,270 --> 00:18:52,960
爱点物理点点新世界 没有x-可引力 
Love dot physics dot new world, no x-able gravity,

365
00:18:52,960 --> 00:18:57,910
但是我们在y轴上会有300个单位的正重力 
but we are going to have 300 units of positive gravity on the y-axis, which

366
00:18:57,910 --> 00:19:01,720
是从上到下 
is going from top to bottom.

367
00:19:01,720 --> 00:19:06,460
我们的方块需要一个在游戏世界中的实体 我们的静态方块 
We need a body for our square that's in our game world, our static square.

368
00:19:06,460 --> 00:19:08,800
因此 我们将继续在这里定义一个新的身体 
So we're going to go ahead and define a new body here.

369
00:19:08,800 --> 00:19:11,251
爱点物理点新身体走进世界 
Love dot physics dot new body takes in the world,

370
00:19:11,251 --> 00:19:14,500
回想一下 因为这就是我们的世界将如何引用那个身体 
recall, because that's how our world's going to have a reference to that body,

371
00:19:14,500 --> 00:19:18,117
不知道 除非我们把它传到这里 我们的新身体构造者 
doesn't know about it unless we pass it into here, our new body constructor.

372
00:19:18,117 --> 00:19:20,950
然后我就把它放在屏幕中央 
And then I'm just going to put it right in the middle of the screen.

373
00:19:20,950 --> 00:19:25,030
所以虚拟宽度除以2 虚拟高度除以2 
So virtual width divided by 2 and virtual height divided by 2.

374
00:19:25,030 --> 00:19:29,020
Box2D物体与物体的区别
The difference between Box2D bodies and things

375
00:19:29,020 --> 00:19:31,270
我们以前画过或见过的东西是
that we've drawn before or seen before is

376
00:19:31,270 --> 00:19:34,690
一切都是由它的中心点定义的 而不是它的左上角 
that everything is defined by its center point, as opposed to its top left.

377
00:19:34,690 --> 00:19:37,150
所以我可以说虚拟宽度除以2
So I'm able to say virtual width divided by 2

378
00:19:37,150 --> 00:19:39,270
这里用虚拟高度除以2 
and virtual height divided by 2 here.

379
00:19:39,270 --> 00:19:42,790
但实际上我不需要说虚拟宽度除以2减去任何东西
But I don't actually need to say virtual width divided by 2 minus whatever

380
00:19:42,790 --> 00:19:44,800
那个正方形的一半是 
the half of that square is.

381
00:19:44,800 --> 00:19:50,740
默认情况下 中心点是该对象的XY 
By default, the center point is the XY of that object.

382
00:19:50,740 --> 00:19:55,600
我们新Body的构造函数中的最后一个字符串是静态的 
And this last string here in the constructor for our new body, static,

383
00:19:55,600 --> 00:19:58,810
告诉构造函数这将是一个特定的静态主体 
tells the constructor that this is going to be a static body specifically,

384
00:19:58,810 --> 00:20:02,960
既不是动力学物体 也不是运动学物体 
not a dynamic body and not a kinematic body.

385
00:20:02,960 --> 00:20:05,962
所以我们有一个物体 它是静态的 但它没有形状 
So we have a body and it's static, but it doesn't have a shape,

386
00:20:05,962 --> 00:20:08,920
它真的不知道如何与我们世界中的任何其他东西互动 
it doesn't really know how to interact with anything else in our world.

387
00:20:08,920 --> 00:20:10,270
所以我们要给它一个--
So we're going to give it a--

388
00:20:10,270 --> 00:20:12,340
我们首先要创建一个新的形状 
we're going to create a new shape first.

389
00:20:12,340 --> 00:20:18,347
因此 爱以新的X字形的形式给了我们一些功能 
So love gives us a few functions in the form of new X shape.

390
00:20:18,347 --> 00:20:20,930
我们有新的矩形 新的圆形 新的边缘形状 
We have new rectangle shape, new circle shape, new edge shape,

391
00:20:20,930 --> 00:20:22,620
还有其他几个 
a few other ones.

392
00:20:22,620 --> 00:20:26,380
我们只需要创建一个宽度和高度为10的新矩形 
We're just going to create a new rectangle of width and height of 10.

393
00:20:26,380 --> 00:20:28,420
这就是10号和10号在这里的原因 
So that's what the 10 and 10 are here.

394
00:20:28,420 --> 00:20:31,070
然后我们将创建一个新的灯具 
Then we're going to create a new fixture.

395
00:20:31,070 --> 00:20:37,370
我们要用这个功能把盒子的形状固定在我们的身体上 
We're going to affix the box shape to our body with this function.

396
00:20:37,370 --> 00:20:44,420
一旦我们这样做了 我们所要做的就是用填充渲染一个多边形
And then once we do that, all we have to do is then render a polygon with fill

397
00:20:44,420 --> 00:20:48,950
然后我们得到我们的--或我们的多边形的顶点的坐标
and then we get the coordinates for our-- or the vertices for our polygon

398
00:20:48,950 --> 00:20:52,190
通过这句话 身体得到了世界积分 
by saying, body get world points.

399
00:20:52,190 --> 00:20:55,940
所以这是任何Box2D实体的函数
So that's a function off of any Box2D body

400
00:20:55,940 --> 00:21:01,400
这基本上会得到它在世界上的位置和它的所有顶点 
that will basically get where it is in the world and all of its vertices.

401
00:21:01,400 --> 00:21:04,730
然后你只需传递你想要得到的分数的形状 
And then you just pass in the shape that you want to get the points for.

402
00:21:04,730 --> 00:21:08,300
最终会在这里爆炸成一组顶点
And that will end up just exploding here into a set of vertices

403
00:21:08,300 --> 00:21:10,790
填满了这个爱心的圆点图形圆点多边形 
that fill up this love dot graphics dot polygon.

404
00:21:10,790 --> 00:21:17,090
这样做的最终结果是我们得到了一个平方 
And the end result of that is we get a square.

405
00:21:17,090 --> 00:21:21,275
我们特别使用多边形而不是爱情
And we specifically use polygon instead of love

406
00:21:21,275 --> 00:21:24,566
点图形点出新的矩形 因为这就是
dot graphics dot new rectangle because that's what the get

407
00:21:24,566 --> 00:21:26,690
世界积分函数爆炸到 
world points function explodes out to.

408
00:21:26,690 --> 00:21:32,150
它不会爆炸到满足以下条件的参数数量
It doesn't explode out to the number of arguments that would satisfy

409
00:21:32,150 --> 00:21:35,040
喜欢圆点图形 圆点矩形 
love dot graphics dot rectangle.

410
00:21:35,040 --> 00:21:37,460
所以这不是一个非常令人兴奋的例子 
So not a very exciting example.

411
00:21:37,460 --> 00:21:43,110
但这基本上是完整的Box2D应用程序的基础 
But this is basically the foundation of a full Box2D application.

412
00:21:43,110 --> 00:21:46,411
那么 对于这是如何运作的 有什么问题吗？
So any questions as to how this works at all?

413
00:21:46,411 --> 00:21:47,036
观众：是的 
AUDIENCE: Yeah.

414
00:21:47,036 --> 00:21:48,032
我在想 
I'm wondering.

415
00:21:48,032 --> 00:21:52,514
它如何确定反常形状的中心？
How does it determine the center of a abnormal shape?

416
00:21:52,514 --> 00:21:54,804
不像多边形、正方形、矩形或圆形 
Not like a polygon, square, rectangle, or circle.

417
00:21:54,804 --> 00:21:56,720
科尔顿·奥格登：反常形状的中心 
COLTON OGDEN: The center of an abnormal shape.

418
00:21:56,720 --> 00:21:57,710
我不完全确定 
I'm not entirely sure.

419
00:21:57,710 --> 00:22:00,774
这个圈子就是...
The circle is just--

420
00:22:00,774 --> 00:22:01,680
观众：[听不见]
AUDIENCE: [INAUDIBLE]

421
00:22:01,680 --> 00:22:02,471
科尔顿·奥格登：是的 
COLTON OGDEN: Yeah.

422
00:22:02,471 --> 00:22:04,790
不过 我对多边形不是完全确定 
I'm not entirely sure about a polygon though.

423
00:22:04,790 --> 00:22:06,790
我还没有对此进行太多的细节研究 
I haven't looked into that into too much detail.

424
00:22:06,790 --> 00:22:08,040
我可以探索一下 看看 
I can explore that and see.

425
00:22:08,040 --> 00:22:11,320
这就是我认为Box2D是什么--
That's something that I think Box2D is--

426
00:22:11,320 --> 00:22:14,300
实际的库实现并计算了这一点 
the actual library implements that and calculates that.

427
00:22:14,300 --> 00:22:18,029
很可能是根据计算出的--
Probably based upon calculating the area of--

428
00:22:18,029 --> 00:22:20,570
如果我还没有重复的话 对着镜头重复 那就是
and to repeat for the camera if I didn't repeat already, it's

429
00:22:20,570 --> 00:22:25,340
Box2D如何计算非对称物体的中心点 
how does Box2D calculate the center point of something non-symmetrical,

430
00:22:25,340 --> 00:22:27,860
就像一个多边形？
like a polygon?

431
00:22:27,860 --> 00:22:33,230
我所能理解的最好的情况是 它会计算出它的面积
And best I can understand is that it would do an area calculation off of it

432
00:22:33,230 --> 00:22:38,567
然后找出所有顶点的走向 我猜 
and figure out where all the vertices tend towards, I guess.

433
00:22:38,567 --> 00:22:41,150
但是 是的 这是在图书馆中实现的东西 
But, yeah, that's something that's implemented in the library.

434
00:22:41,150 --> 00:22:42,170
我不完全确定 
I'm not entirely sure.

435
00:22:42,170 --> 00:22:46,469
我可以查一查 看看 然后我会在《松弛》上发帖 
I can look into it and see and then I'll post in the Slack.

436
00:22:46,469 --> 00:22:48,718
观众：[INAUDIBLE]看起来你确实有 
AUDIENCE: It seems like [INAUDIBLE] you did have that,

437
00:22:48,718 --> 00:22:52,940
很难把它放在一个非常精确的位置 
it would be difficult to place in a very precise spot.

438
00:22:52,940 --> 00:22:55,010
科尔顿·奥格登：是的 
COLTON OGDEN: Yeah.

439
00:22:55,010 --> 00:22:56,810
如果是的话--是的 
If it were-- yeah.

440
00:22:56,810 --> 00:23:00,220
如果我们确实有一个奇怪的形状来把它放在一个准确的位置 
If we did have an odd shape to get it placed in a exact spot.

441
00:23:00,220 --> 00:23:01,440
是啊 我也不是很确定 
Yeah, I'm not entirely sure.

442
00:23:01,440 --> 00:23:04,450
我得稍微探索一下这一点 
I'd have to explore that a little bit.

443
00:23:04,450 --> 00:23:05,450
不过 这个想法很有趣 
Interesting idea though.

444
00:23:07,980 --> 00:23:13,444
但是 是的 这就是我们建立和运行Box2D世界的基本方式 
But, yeah, that's essentially how we get a Box2D world up and running.

445
00:23:13,444 --> 00:23:14,360
我们有一个静止的物体 
We have a static body.

446
00:23:14,360 --> 00:23:16,580
这并不是特别有趣 
It's not terribly interesting.

447
00:23:16,580 --> 00:23:19,130
但有一个变化--
But with one change--

448
00:23:19,130 --> 00:23:23,150
所以我在源代码发行版中有一个单独的示例 名为Dynamic 
so I have a separate example called dynamic in the source code distro.

449
00:23:23,150 --> 00:23:26,760
但我们需要做的就是真正看到不同之处
But all we need to do to really see the difference

450
00:23:26,760 --> 00:23:32,360
静态和动态之间的物体在第48行 只需将静态改为动态 
between a static and dynamic body is on line 48, just change static to dynamic,

451
00:23:32,360 --> 00:23:35,660
保存它 然后重新运行它 
save it, and then rerun it.

452
00:23:35,660 --> 00:23:38,300
然后我们会立即看到它受到重力的影响
And then we'll immediately see that it's affected by gravity

453
00:23:38,300 --> 00:23:41,930
它向下移动 正如我们告诉世界 我们的引力是
and it moves downwards as we've told the world that our gravity is

454
00:23:41,930 --> 00:23:43,880
设置为正300 
set to positive 300.

455
00:23:43,880 --> 00:23:47,000
所以这就是我们预期的行为方式 
And so that behaves how we would expect it to.

456
00:23:47,000 --> 00:23:50,730
现在 场景中没有其他东西 所以它不是特别有趣 
Now, there's nothing else in the scene so it's not particularly interesting.

457
00:23:50,730 --> 00:23:55,220
所以我创建了另一个名为GROUND的例子 
So I've created a another example called ground.

458
00:23:55,220 --> 00:23:58,110
所以让我们继续下去 看看这个 
So let's go ahead and look at that.

459
00:24:02,970 --> 00:24:09,408
因此 如果我们想要更有趣的行为 简而言之 我们需要做什么？
So if we want more interesting behavior, what do we need to do in a nutshell?

460
00:24:09,408 --> 00:24:11,719
观众：有更多的形状 并形成一个地面 
AUDIENCE: Have more shapes and make a ground.

461
00:24:11,719 --> 00:24:13,760
科尔顿·奥格登：更多的形状 并形成一个地面 
COLTON OGDEN: Some more shapes and make a ground.

462
00:24:13,760 --> 00:24:14,600
一点儿没错 
Exactly.

463
00:24:14,600 --> 00:24:17,330
这是一个简单的方法 我们可以立即开始
That's a simple way we can start to get instantly

464
00:24:17,330 --> 00:24:19,490
了解Box2D的功能有多强大 
a sense of how powerful Box2D is.

465
00:24:19,490 --> 00:24:22,940
只需引入更多以不同方式相互作用的形状 
Just introduce more shapes that interact with each other in different ways.

466
00:24:22,940 --> 00:24:28,540
因此地面是一个例子 它将地面引入到我们的场景中 
So ground is an example that just introduces a ground into our scene,

467
00:24:28,540 --> 00:24:33,590
这样我们就能看到盒子掉落下来 实际上撞上了其他东西 
so that we can see the box fall down and actually collide with something else.

468
00:24:33,590 --> 00:24:36,480
而Love2D让这一切变得简单而美好 
And Love2D makes this nice and easy.

469
00:24:36,480 --> 00:24:37,190
打扰一下
Excuse me.

470
00:24:37,190 --> 00:24:40,640
它们有一个实际的边缘形状 
They have a actual edge shape that will allow us

471
00:24:40,640 --> 00:24:44,150
在地面上形成 
to basically form where the ground is.

472
00:24:44,150 --> 00:24:48,710
任何与之相碰撞的东西 实际上就是一条线
Anything that collides with this-- it's effectively a line.

473
00:24:48,710 --> 00:24:52,430
但无论场景中的物体移动得有多快 
But no matter how fast anything moves in are scene,

474
00:24:52,430 --> 00:24:56,690
身体不会越过那条线
the body will not move past that line.

475
00:24:56,690 --> 00:25:00,100
所以这是一个很好的 简单的方法来获得一个地面在我们的场景
So it's a nice, easy way of getting a ground in our scene

476
00:25:00,100 --> 00:25:03,560
而不必实现可能有两个顶点的多边形 
without having to implement a polygon that maybe has two vertices going

477
00:25:03,560 --> 00:25:05,387
屏幕上从左到右 
left to right on the screen.

478
00:25:05,387 --> 00:25:06,470
所以这就是我们在这里做的 
So that's what we do here.

479
00:25:06,470 --> 00:25:11,720
我们有一个地面身体 这是一个静态的身体 回忆一下 
We have a ground body, which is a static body, recall.

480
00:25:11,720 --> 00:25:14,150
因为地面不应该移动 
Because the ground shouldn't move.

481
00:25:14,150 --> 00:25:18,101
我们要把盒子变成一个动态的物体 
We're going to change the box into a dynamic body,

482
00:25:18,101 --> 00:25:19,350
但地面不应该移动
but the ground shouldn't move.

483
00:25:19,350 --> 00:25:21,183
地面应该不受任何影响 
The ground should be unaffected by anything.

484
00:25:21,183 --> 00:25:23,210
在我们的场景中 它将是静态的 
It's going to be static in our scene.

485
00:25:23,210 --> 00:25:25,400
它会有一个边缘形状 
And it's going to have an edge shape.

486
00:25:25,400 --> 00:25:28,850
注意这里 我们取0 0作为XY轴 
So notice here, we take 0, 0 as the XY.

487
00:25:28,850 --> 00:25:31,220
然后虚拟宽度为零 
And then a virtual width is zero.

488
00:25:31,220 --> 00:25:35,510
所以当我们在这里定义形状时 
So with shapes, when we define them here,

489
00:25:35,510 --> 00:25:39,690
它不会在0 0 虚拟宽度为0处绘制形状 
it's not going to draw the shape at 0, 0, at virtual width in 0.

490
00:25:39,690 --> 00:25:42,680
这是相对于身体所在的地方而言的 
This is relative to wherever the body is located.

491
00:25:42,680 --> 00:25:45,350
所以无论我们的身体在哪里 
So wherever our body is, this shape will be

492
00:25:45,350 --> 00:25:49,460
用这些坐标 这个X和Y 这个宽度和高度 
drawn with these coordinates, this X and Y and this width and height,

493
00:25:49,460 --> 00:25:50,930
相对于此 
relative to that.

494
00:25:50,930 --> 00:25:56,130
特别是相对于我们放置物体的中心点 
And specifically, relative to the center point of wherever we place a body.

495
00:25:56,130 --> 00:26:01,440
所以如果这个地被设置为0 0在虚拟宽度和零 
So if this ground is set to 0, 0 at virtual width and zero,

496
00:26:01,440 --> 00:26:03,440
我们要把尸体放在哪里
where do we need to place the actual body for it

497
00:26:03,440 --> 00:26:08,125
来适当地渲染地面
to render the ground appropriately?

498
00:26:08,125 --> 00:26:09,829
观众：中间的底部 
AUDIENCE: The middle bottom.

499
00:26:09,829 --> 00:26:12,370
是的 所以我们把它放在中间的底部 
COLTON OGDEN: Yeah, so we place it towards the middle bottom.

500
00:26:12,370 --> 00:26:18,670
所以我们实际上把物体本身放在这里 虚拟高度减30 
So we actually end up placing the body itself here at virtual height minus 30.

501
00:26:18,670 --> 00:26:21,850
当我们把这个边缘形状固定在身体上时 
And when we affix this edge shape to the body, we'll end up,

502
00:26:21,850 --> 00:26:24,280
即使它写的是0 0虚拟宽度零 
even though it says 0, 0 virtual width zero,

503
00:26:24,280 --> 00:26:27,070
它是相对于物体的XY坐标的 
it's relative to wherever the body's XY are.

504
00:26:27,070 --> 00:26:31,210
实际上是0虚拟高度减30 
So it's actually going to be 0 virtual height minus 30,

505
00:26:31,210 --> 00:26:35,800
虚拟宽度零将是该边缘存在的地方 
virtual width zero will be where that edge exists.

506
00:26:35,800 --> 00:26:37,990
最后 就像我们对盒子做的那样 
And then lastly, just as we did with our box,

507
00:26:37,990 --> 00:26:41,980
我们需要一个地面固定装置 这样地面机构才能知道如何
we need a ground fixture so that the ground body knows how

508
00:26:41,980 --> 00:26:43,820
它应该与其他东西互动 
it should interact with other things.

509
00:26:43,820 --> 00:26:47,350
所以我们要贴上边缘形状 这只是一条线 
So we're going to affix the edge shape, which is just a line,

510
00:26:47,350 --> 00:26:49,870
到我们的地面躯体 
to our ground body.

511
00:26:49,870 --> 00:26:53,410
然后在这里 我们确实喜欢点图形--只是
And then here we do love dot graphics-- just

512
00:26:53,410 --> 00:26:58,030
就像我们对长方体的Love点图形点多边形所做的那样 
as we did with the love dot graphics dot polygon for our box,

513
00:26:58,030 --> 00:27:00,931
我们将为我们的地面实体做点图形点线 
we're going to do love dot graphics dot line for our ground body.

514
00:27:00,931 --> 00:27:03,430
我们将做同样的事情 获得世界积分
And we're going to do the exact same thing, get world points

515
00:27:03,430 --> 00:27:06,510
然后在这里得到通过边缘形状的点数 
and get points passing the edge shape here.

516
00:27:06,510 --> 00:27:09,850
我还将线宽设置为2
And I'm also setting a line width of 2 just

517
00:27:09,850 --> 00:27:11,920
这样我们就能看得更清楚一点 
so we can see it a little bit better.

518
00:27:11,920 --> 00:27:13,580
我要把它涂成红色 
And I'm going to color it red.

519
00:27:13,580 --> 00:27:17,770
再一次 我把盒子涂成了绿色 
Again, I colored the box up here green.

520
00:27:17,770 --> 00:27:20,570
所以 继续来看看这是什么样子的 
So go ahead take a look at what this looks like.

521
00:27:20,570 --> 00:27:24,280
所以我要进入地下了 
So I'm going to go into ground.

522
00:27:27,120 --> 00:27:30,460
所以请注意--我还添加了一点恢复原状
And so notice-- and I also added a little bit of restitution

523
00:27:30,460 --> 00:27:33,910
对于--就像我之前说的 修复是固定装置可以做到的一种品质
to the-- as I said before, restitution is a quality that a fixture can

524
00:27:33,910 --> 00:27:35,890
具有赋予它弹力的 
have which gives it bounciness.

525
00:27:35,890 --> 00:27:38,350
因此 与其只是平直地倒在地上 
So rather than just falling flat down onto the ground,

526
00:27:38,350 --> 00:27:39,740
它也会有一点反弹 
it bounces a little bit as well.

527
00:27:39,740 --> 00:27:42,323
我们可以看到互动 所以我再播放一次 
And we can see the interaction, so I'll play it one more time.

528
00:27:42,323 --> 00:27:43,630
它从中间开始 
It starts in the middle.

529
00:27:43,630 --> 00:27:46,600
然后当它一击中地面物体
And then as soon as it hits the ground body

530
00:27:46,600 --> 00:27:49,840
我们之前创建的边缘形状 它会反弹几次 
that we created before, the edge shape, it bounces a couple of times.

531
00:27:49,840 --> 00:27:54,580
但它表明盒子是动态的 但地面是静态的 
But it shows that the box is dynamic, but the ground is static.

532
00:27:54,580 --> 00:27:57,040
没有任何东西会影响地面的位置 
Nothing influences the position of the ground.

533
00:27:57,040 --> 00:28:01,900
它变得坚硬 并将永久留在那里 
It gets hard set and will stay there permanently.

534
00:28:01,900 --> 00:28:05,260
这显示了一个很好、简单、简单的演示
So that shows a nice, easy simple demonstration

535
00:28:05,260 --> 00:28:09,820
静态物体和动态物体之间的相互作用 
of an interaction between a static and a dynamic body.

536
00:28:09,820 --> 00:28:13,250
我将继续在这里举另一个例子 
I'm going to go ahead and pull up another example here.

537
00:28:13,250 --> 00:28:18,460
所以运动学 回想一下 运动学和
So kinematic, recall, what was the difference between a kinematic

538
00:28:18,460 --> 00:28:21,298
是静态的还是动态的呢？
and a static or dynamic body?

539
00:28:21,298 --> 00:28:23,798
观众：运动学可以移动 但不能影响其他形状 
AUDIENCE: Kinematic can move but not influence other shapes.

540
00:28:23,798 --> 00:28:24,714
科尔顿·奥格登：正确 
COLTON OGDEN: Correct.

541
00:28:24,714 --> 00:28:26,030
所以运动学的物体可以移动 
So a kinematic body can move.

542
00:28:26,030 --> 00:28:31,000
你可以把它归结为位置速度或角速度 它是旋转 
You can ascribe it positional velocity or angular velocity, it's rotation.

543
00:28:31,000 --> 00:28:35,290
但当有东西与它相撞时 它不会受到它的影响 
But when something collides with it, it's not going to be influenced by it.

544
00:28:35,290 --> 00:28:38,530
它会影响与之相撞的物体 
It's going to influence the body that it collides with.

545
00:28:38,530 --> 00:28:40,780
它会以某种方式影响它 但不会
It's going to affect it in some way, but nothing

546
00:28:40,780 --> 00:28:42,700
与运动学物体的碰撞
colliding with the kinematic body is going

547
00:28:42,700 --> 00:28:45,790
对其位置或速度产生影响 
to have an effect on its position or its velocity.

548
00:28:45,790 --> 00:28:48,970
它是某种存在的东西 并做一些编程的事情
It's something that exists and does something programmed

549
00:28:48,970 --> 00:28:50,920
并将无限期地这样做 但它
and will just do that indefinitely, but it

550
00:28:50,920 --> 00:28:55,260
会按照我们的程序与其他动态体相互作用 
will interact with other dynamic bodies as we have programmed.

551
00:28:55,260 --> 00:28:57,760
它也不会与其他运动学物体相互作用 
And it will not interact with other kinematic bodies either.

552
00:28:57,760 --> 00:29:00,280
他们几乎会假装对方并不存在 
They will almost pretend that each other doesn't exist.

553
00:29:00,280 --> 00:29:03,785
如果将静态和运动学实体或运动学和运动学实体重叠 
If you overlap a static and a kinematic body or kinematic and a kinematic body,

554
00:29:03,785 --> 00:29:06,160
它们在彼此之上渲染 但它们实际上并不
they render on top of each other, but they don't actually

555
00:29:06,160 --> 00:29:09,470
影响彼此的立场或诸如此类的事情 
influence each other's position or anything like that.

556
00:29:09,470 --> 00:29:13,695
所以我将继续 运行运动学的例子 
So I'm going to go ahead and run the kinematic example.

557
00:29:19,550 --> 00:29:23,780
所以这里我们有几件事正在发生 
So here we have a few things going on.

558
00:29:23,780 --> 00:29:27,410
我们有我们以前拥有的盒体 动感盒子
We have the box body that we had before, the dynamic box that

559
00:29:27,410 --> 00:29:29,520
从屏幕中央掉落 
falls from the middle of the screen.

560
00:29:29,520 --> 00:29:31,700
我们在最底层有一块地可以抓住它 
We have the ground on the very bottom to catch it.

561
00:29:31,700 --> 00:29:35,240
但我们在中间有三个运动学盒子 
But we have three kinematic boxes in the very center that

562
00:29:35,240 --> 00:29:39,440
正在旋转 影响着绿色盒子
are spinning that influence the green box

563
00:29:39,440 --> 00:29:41,700
当绿色的盒子与它们相撞时 
when the green box collides with them.

564
00:29:41,700 --> 00:29:44,510
如你所见 它把它抛来抛去 然后
So as you can see, it tosses it around and then

565
00:29:44,510 --> 00:29:46,610
绿色的身体掉落到底部 
the green body falls back to the bottom.

566
00:29:46,610 --> 00:29:49,070
在这个例子中 我取消了它的原状 
And in this example I've taken away its restitution.

567
00:29:49,070 --> 00:29:53,300
因此 它一落地 就会平直地坠落 
So as soon as it hits the ground, it just falls flat.

568
00:29:53,300 --> 00:29:54,870
简单得不得了 
Just like that.

569
00:29:54,870 --> 00:29:57,330
所以 如你所见 这些蓝色的物体 它们在移动 
And so, as you can see, these blue bodies, they're moving.

570
00:29:57,330 --> 00:30:00,830
它们有无限的角速度 
They have angular velocity indefinitely.

571
00:30:00,830 --> 00:30:04,940
具体来说就是每秒360度 
Specifically 360 degrees per second.

572
00:30:04,940 --> 00:30:09,080
它们将保持在正确的位置并以正确的方式旋转
And they will stay in that exact position and rotate in that exact way

573
00:30:09,080 --> 00:30:10,080
直到永远 
forever.

574
00:30:10,080 --> 00:30:13,370
但一旦它们与一个有活力的物体互动 
But as soon as they interact with a dynamic body,

575
00:30:13,370 --> 00:30:16,670
它们实际上导致了与那个动态物体的碰撞 
they actually cause a collision with that dynamic body.

576
00:30:16,670 --> 00:30:19,550
碰撞解决了 这个绿色的物体
And the collision resolves and this green body

577
00:30:19,550 --> 00:30:21,710
被抛来抛去 因为它是动态的 
gets tossed around because it's dynamic.

578
00:30:21,710 --> 00:30:27,350
它基本上会尽其所能与游戏世界互动
It will basically do whatever it can to interact with the game world

579
00:30:27,350 --> 00:30:30,590
只要它与其他物体相互作用
as long as it's interacting with other bodies

580
00:30:30,590 --> 00:30:32,270
并以这种方式解决它的碰撞 
and resolving its collision that way.

581
00:30:34,800 --> 00:30:39,860
这就是三个不同物体之间的关键例子
And so that's the key example between what the three different bodies are

582
00:30:39,860 --> 00:30:40,580
从根本上说 
fundamentally.

583
00:30:40,580 --> 00:30:45,182
有了这三种体型 你几乎可以构建任何场景
And with these three body types you can construct pretty much any scene

584
00:30:45,182 --> 00:30:45,890
这是你想要的 
that you want to.

585
00:30:45,890 --> 00:30:50,180
显然 车身和固定装置可能会变得非常复杂 
And obviously the bodies and the fixtures can get insanely complex.

586
00:30:50,180 --> 00:30:55,010
我的意思是 我们可以回顾一下第一个例子 
I mean, we can look back here at this first example.

587
00:30:55,010 --> 00:31:05,780
这些结构是许多不同类型的动态体的组合
These structures are a composition of many different types of dynamic bodies

588
00:31:05,780 --> 00:31:11,330
它们被赋予了锚和关节以及其他各种各样的东西
that have been given anchors and joints and all sorts of other things

589
00:31:11,330 --> 00:31:15,170
让它们看起来像是大型建筑 
to make them look as if they're big constructions.

590
00:31:15,170 --> 00:31:18,370
但最后 他们都只是一群小肉体
But at the end, they're all just a bunch of little bodies

591
00:31:18,370 --> 00:31:20,870
焊接在一起的设备 焊接在一起的设备 
that are welded together, fixtures that are welded together.

592
00:31:23,480 --> 00:31:27,710
而这些基本的构建块就是如何构建这样的场景的 
And these fundamental building blocks are how you construct scenes like this.

593
00:31:27,710 --> 00:31:32,210
把这些块放在一起 用接头把它们焊接在一起 
Put a bunch of these blocks together, weld them together with joints,

594
00:31:32,210 --> 00:31:33,050
在这种情况下 
in this case.

595
00:31:33,050 --> 00:31:35,840
我们不会在这堂课的上下文中讨论关节 
We won't cover joints in the context of this lecture.

596
00:31:35,840 --> 00:31:39,290
但如果你想知道所有这些个体的东西
But if you're wondering how all of these individual things

597
00:31:39,290 --> 00:31:44,729
是可碰撞的 同时仍然构建这些巨大的场景
can be collideable while still constructing these massive scenes

598
00:31:44,729 --> 00:31:46,520
将物理学应用于它们 它们是
and having physics applied to them, they're

599
00:31:46,520 --> 00:31:51,140
只是使用焊接接头或其他类型的接头、滑轮接头连接在一起
just jointed together using weld joints or other types of joints, pulley joints

600
00:31:51,140 --> 00:31:52,640
这取决于它们是什么 
depending on what they are.

601
00:31:52,640 --> 00:31:58,760
在这种情况下 这里有两个圆形 圆形灯具 
In this case, there is two circle shapes here, circle fixtures,

602
00:31:58,760 --> 00:32:01,190
这是这辆车上的轮子 然后
that are the wheels on this cart and then

603
00:32:01,190 --> 00:32:06,740
它们被焊接到这里的扁平建筑上 
they're welded to the flat constructions here.

604
00:32:06,740 --> 00:32:09,980
允许那些是动态的允许车轮滚动 因此
Allowing those to be dynamic allows the wheels to roll, and therefore

605
00:32:09,980 --> 00:32:12,650
随身带着另一件重担 
carry the other load with it.

606
00:32:12,650 --> 00:32:14,390
这座桥也是如此 
Same with this bridge.

607
00:32:14,390 --> 00:32:18,710
我忘了关节的确切名称 但它是一串固定装置
I forget the exact name of the joint, but it's a chain of fixtures together

608
00:32:18,710 --> 00:32:20,720
由特定类型的接头焊接而成 
that are welded by a specific kind of joint.

609
00:32:20,720 --> 00:32:23,090
通过以这种方式将它们放在一起 
And by putting them together in this way,

610
00:32:23,090 --> 00:32:27,740
你有一座桥 还有你能想到的各种东西 
you get a bridge and all sorts of things that you could think of,

611
00:32:27,740 --> 00:32:33,830
包括坦克 这是在这里的注释中 
including tanks, which is in the notes here.

612
00:32:33,830 --> 00:32:36,080
第三个环节 其中一个谈到了如何
This third link, one of them talks about how

613
00:32:36,080 --> 00:32:37,970
用踏板来实施坦克
to implement a tank by having treads going

614
00:32:37,970 --> 00:32:40,580
绕着圆圈 然后是一个巨大的身体 
around circles and then a massive body.

615
00:32:40,580 --> 00:32:45,156
你可以用Box2D做任何事情 它是一个很棒的库 
You could do anything with Box2D, it's an awesome library.

616
00:32:45,156 --> 00:32:47,030
在《愤怒的小鸟》的背景下 我们真的只是
In the context of Angry Birds, really we just

617
00:32:47,030 --> 00:32:49,400
对于这里可能发生的事情 触及了皮毛 
scratched the surface for what is possible here.

618
00:32:52,470 --> 00:32:54,590
现在我要做演示了 
So I'm going to demo now.

619
00:32:54,590 --> 00:32:59,480
事实上 我觉得我很喜欢这个演示 这段代码 
Actually, I enjoyed, I think, this demo, this bit of code,

620
00:32:59,480 --> 00:33:03,410
比起我更喜欢《愤怒的小鸟》的实现 
more than I enjoyed the Angry Birds implementation.

621
00:33:03,410 --> 00:33:06,400
这是我写的一个叫球坑的程序 
And it's a program that I wrote called Ball Pit.

622
00:33:06,400 --> 00:33:08,160
哦 顺便说一句 在我开始之前 
Oh, by the way, before I get into that.

623
00:33:08,160 --> 00:33:11,840
因此 我想我会把它作为一个小小的预告片 
So I'll leave that as a little teaser, I guess.

624
00:33:11,840 --> 00:33:15,440
看运动学 真的很快 
Looking at kinematic, really quickly.

625
00:33:15,440 --> 00:33:18,590
我们要看看我已经创造了
We're going to look and see that I've created

626
00:33:18,590 --> 00:33:23,450
运动体工作台 夹具工作台 
a table for the kinematic bodies, a table for the fixtures,

627
00:33:23,450 --> 00:33:24,802
然后是一个形状 
and then one shape.

628
00:33:24,802 --> 00:33:26,510
因为你实际上只需要一个形状 
Because you only need one shape actually,

629
00:33:26,510 --> 00:33:28,400
您可以将一个形状应用于任意多个实体
and you can apply one shape to as many bodies

630
00:33:28,400 --> 00:33:32,960
只要它们都有相同的形状 就可以 
as you want to as long as they all have the same shape.

631
00:33:32,960 --> 00:33:35,690
我在这里只创建了三个运动学实体 
I just create three kinematic bodies here.

632
00:33:35,690 --> 00:33:39,590
所以用这个数学方法 把它们相对于中心隔开 
So spacing them out relative to the center with this math here.

633
00:33:39,590 --> 00:33:41,019
他们得到了运动学的弦 
They get the string kinematic.

634
00:33:41,019 --> 00:33:42,560
这真的是关键的区别 
And that's really the key difference.

635
00:33:42,560 --> 00:33:45,830
然后在结束之前 我要确保我
And then before finishing, I make sure that I

636
00:33:45,830 --> 00:33:47,920
将它们设置为角速度 
set them to have an angular velocity.

637
00:33:47,920 --> 00:33:49,400
所以这就是你旋转东西的方式 
So this is how you spin something.

638
00:33:49,400 --> 00:33:51,483
如果你想让某物无限期地旋转 
If you want to set something to spin indefinitely,

639
00:33:51,483 --> 00:33:52,730
只要设置一个角速度即可 
just set an angular velocity.

640
00:33:52,730 --> 00:33:56,540
在这种情况下 360度为弧度 
In this case, 360 times degrees to radians.

641
00:33:56,540 --> 00:34:01,880
这只是一个写成常量的公式 这只是一个数字--
And that's just a formula written out as a constant, which is just the number--

642
00:34:01,880 --> 00:34:05,942
我马上就忘了公式到底是什么 
I forget offhand what exactly the formula is.

643
00:34:05,942 --> 00:34:06,650
但它就在上面 
But it's up here.

644
00:34:06,650 --> 00:34:13,070
温度是弧度0.01745329度 等等 
It's degrees to radians 0.01745329, et cetera.

645
00:34:13,070 --> 00:34:15,949
但就像圆周率一样 这是一个你可以
But just like pi, it's a number that you can

646
00:34:15,949 --> 00:34:19,540
用度数乘一个数 就会得到一个弧度数 
use to multiply a number in degrees, and you'll get a number in radians.

647
00:34:19,540 --> 00:34:22,120
而且在那里也有相反的情况 
And there's the reverse up there as well.

648
00:34:22,120 --> 00:34:26,949
我们必须这样做 因为Box2D预计 对于任何类型的旋转 
We have to do this because Box2D expects, for any types of rotation,

649
00:34:26,949 --> 00:34:28,239
它预计会以弧度为单位 
it expects it in radians.

650
00:34:28,239 --> 00:34:30,050
我更喜欢按度思考 
I prefer thinking in degrees.

651
00:34:30,050 --> 00:34:33,370
所以我把360度变成弧度 
So I passed in 360 times degrees to radians.

652
00:34:33,370 --> 00:34:37,340
所以我们在这里渲染 就像我们对盒体所做的那样 
And so we render down here, just as we did with the box body.

653
00:34:37,340 --> 00:34:42,790
我们在I处渲染运动体、多边形填充、运动体
We render the kinematic bodies, polygon fill, kinematic bodies at i

654
00:34:42,790 --> 00:34:45,639
获取世界点运动学形状获取点 
get world points kinematic shape get points.

655
00:34:45,639 --> 00:34:47,179
没有太大的不同 
Nothing terribly different.

656
00:34:47,179 --> 00:34:50,949
唯一真正的关键区别是我们将运动学添加为字符串
The only real key difference is that we've added kinematic as a string

657
00:34:50,949 --> 00:34:53,659
传递给Body的构造函数 
to the constructor for the body.

658
00:34:53,659 --> 00:34:55,810
我们增加了一些角速度 
And we've added some angular velocity.

659
00:34:55,810 --> 00:34:58,082
记住 这会让它无限期地旋转 
And recall, this will make it spin indefinitely,

660
00:34:58,082 --> 00:35:00,790
但它永远不会受到影响--它的角速度永远不会
but it will never be influenced-- its angular velocity will never

661
00:35:00,790 --> 00:35:03,850
受到影响 它的地位永远不会受到影响
be influenced, its position will never be influenced

662
00:35:03,850 --> 00:35:06,310
在我们的场景中被其他任何东西 
by anything else in our scene.

663
00:35:06,310 --> 00:35:10,060
好了 现在我要把球坑拉起来 
So now with that out of the way, I'm going to pull up Ball Pit.

664
00:35:13,170 --> 00:35:15,590
也许我只是对这个有点太兴奋了 
And maybe I'm just a little bit too excited about this.

665
00:35:15,590 --> 00:35:18,160
但我很享受这个过程 
But I enjoyed this a lot.

666
00:35:18,160 --> 00:35:22,300
所以 这就像是一个更大的演示
So what it is, is this is like a bigger demonstration

667
00:35:22,300 --> 00:35:24,680
把所有这些碎片放在一起 
of putting all these pieces together.

668
00:35:24,680 --> 00:35:26,994
我们有一堆圆形的形状 
We have a bunch of circle shapes.

669
00:35:26,994 --> 00:35:28,660
它们都在相互作用 
They're all interacting with each other.

670
00:35:28,660 --> 00:35:29,770
他们都有物理课 
They all have physics.

671
00:35:29,770 --> 00:35:33,190
然后我这里有一个更大的形状 这个正方形 
And then I have a larger shape here, this square,

672
00:35:33,190 --> 00:35:35,510
它的密度比其他任何东西都要高 
which has a higher density than everything else.

673
00:35:35,510 --> 00:35:38,660
按下空格键 我就可以直接进入--
And by pressing Spacebar I can just dive into--

674
00:35:38,660 --> 00:35:41,440
把它扔到球坑里 它会引起相互作用
throw it into the ball pit, and it'll cause an interaction

675
00:35:41,440 --> 00:35:42,670
以及其他的一切 
with everything else.

676
00:35:42,670 --> 00:35:46,780
和我发现的一个错误斜杠功能
And a bug slash feature that I discovered

677
00:35:46,780 --> 00:35:51,070
如果你一次又一次地按空格键 
about this is that if you press Spacebar over and over again,

678
00:35:51,070 --> 00:35:53,510
它永远不会重置它的速度 
it never resets its velocity.

679
00:35:53,510 --> 00:35:55,854
所以它就撞到了球坑里 
So it just slams down into the ball pit.

680
00:35:55,854 --> 00:35:58,270
所以这只是一种乐趣 我认为实际上
So it's just kind of fun, and I think there might actually

681
00:35:58,270 --> 00:36:00,580
在这里可能是个游戏创意 
be possibly a game idea in here.

682
00:36:00,580 --> 00:36:02,710
但是 我的意思是 好吧 这里的碎片是什么？
But, I mean, well, what are the pieces here?

683
00:36:02,710 --> 00:36:04,000
这有什么不同？
What's different about this?

684
00:36:07,388 --> 00:36:10,949
观众：它们都是动态的造型 
AUDIENCE: They're all dynamic shapes.

685
00:36:10,949 --> 00:36:11,740
科尔顿·奥格登：是的 
COLTON OGDEN: Yeah.

686
00:36:11,740 --> 00:36:13,490
所以它们都是动态的形状 
So they're all dynamic shapes.

687
00:36:13,490 --> 00:36:15,410
除了最底层的地面 
Except for the ground at the very bottom.

688
00:36:15,410 --> 00:36:21,994
此外 隐藏在视野之外的还有另外两个静态形状
And also, hidden from view are actually two more static shapes

689
00:36:21,994 --> 00:36:22,910
在左边和右边 
on the left and right.

690
00:36:22,910 --> 00:36:25,160
因为如果我们没有这些 所有的球
Because if we didn't have those, all of the balls

691
00:36:25,160 --> 00:36:28,520
会掉到看不见的一边 
would fall to the side out of view.

692
00:36:28,520 --> 00:36:33,020
但没错 我们的场景有静态分隔符 
But yeah, we have the static delimiters for our scene.

693
00:36:33,020 --> 00:36:38,420
但我们有一堆动态的物体 这些球都是动态的 
But we have a bunch of dynamic bodies, the balls are all dynamic.

694
00:36:38,420 --> 00:36:42,470
然后广场也是充满活力的 
And then the square is also dynamic.

695
00:36:42,470 --> 00:36:45,387
然后 就像我之前说的 他们之间唯一真正的区别是
And then, like I said before, the only real difference between them

696
00:36:45,387 --> 00:36:47,220
很明显 正方形是一个长方形 
is that obviously the square is a rectangle.

697
00:36:47,220 --> 00:36:49,200
但它也有更高的密度 
But it also just has a higher density.

698
00:36:49,200 --> 00:36:53,027
因此 通过赋予它更高的密度 它推动了其他一切--哦 
And so by giving it a higher density it pushes everything else-- oh,

699
00:36:53,027 --> 00:36:53,860
那里发生了什么事？
what happened there?

700
00:36:53,860 --> 00:36:54,485
这太奇怪了 
That was weird.

701
00:36:54,485 --> 00:36:57,410
它在推动--我想它睡着了 因为我们什么都没做
It pushes-- I think it went to sleep because we didn't do anything

702
00:36:57,410 --> 00:36:57,980
一段时间 
for a while.

703
00:36:57,980 --> 00:37:01,550
但它可能会跌落到其他任何地方
But it's able to fall through everything else

704
00:37:01,550 --> 00:37:05,960
因为它知道它更重 它应该推动和应用
because it knows that it's heavier, and that it should push and apply

705
00:37:05,960 --> 00:37:09,800
一种更强大的力量来对付它周围的一切 
a larger force to everything else that's around it.

706
00:37:09,800 --> 00:37:14,030
因此 通过使用Box2D的这些基本构建块 
And so by using these fundamental building blocks of what Box2D is,

707
00:37:14,030 --> 00:37:18,320
你可以构建很多非常酷的模拟和其他有趣的程序
you can construct a lot of really cool simulations and other fun programs

708
00:37:18,320 --> 00:37:20,840
真正得到有趣的游戏点子 
and actually get interesting game ideas.

709
00:37:20,840 --> 00:37:25,010
我倾向于相信《愤怒的小鸟》一开始是有人在胡闹
I'm inclined to believe that Angry Birds started out as somebody messing around

710
00:37:25,010 --> 00:37:27,780
使用Box2D 或者像这样的物理引擎 
with the Box2D, or physics engine like this.

711
00:37:27,780 --> 00:37:31,430
它的灵感来自于其他一些游戏 我应该稍微研究一下 
And it was inspired by some other game that I should look into a little bit.

712
00:37:31,430 --> 00:37:34,837
但据推测 这款游戏的创建者发现了这个物理引擎
But the creators of that game, presumably, found this physics engine

713
00:37:34,837 --> 00:37:36,170
然后我们就想 哦 这太酷了 
and were like, oh, this is cool.

714
00:37:36,170 --> 00:37:39,650
我要在这里建一座积木塔 然后向它扔东西 
I'm going to put a tower of blocks here and just throw something at it.

715
00:37:39,650 --> 00:37:42,130
然后他们意识到 哦 我们可以用这个做一个游戏 
And then they realized, oh, we can make a game out of this.

716
00:37:42,130 --> 00:37:46,890
所以我鼓励你 如果你曾经好奇地尝试一些东西
And so I encourage you, if you're ever curious to just experiment with things

717
00:37:46,890 --> 00:37:47,390
就像那样 
like that.

718
00:37:47,390 --> 00:37:49,040
我们或许可以把这变成一场游戏 
We could probably turn this into a game.

719
00:37:49,040 --> 00:37:49,581
我不知道 
I don't know.

720
00:37:49,581 --> 00:37:50,480
我很喜欢这个 
I like this a lot.

721
00:37:50,480 --> 00:38:00,050
这是一个很好的抽象片段 因为没有更好的词、例子
It's a good segue from the abstract, for lack of a better word, examples

722
00:38:00,050 --> 00:38:05,030
 并将其更多地合并到领域中
that we used earlier, and merges it more into the realm

723
00:38:05,030 --> 00:38:09,230
我们如何才能让这件事变得有趣呢？
of how can we make something fun with this?

724
00:38:09,230 --> 00:38:14,570
这就是我们今天开始进入发行版的方式 
And so that's how we're going to start moving into the distro today.

725
00:38:14,570 --> 00:38:21,320
所以今天演讲的主要话题是Box2D 以及我们如何使用它来制作游戏 
So the main topic of today's lecture is Box2D and how we use it to make a game.

726
00:38:21,320 --> 00:38:23,780
我们应该考虑的另一件事是鼠标输入 
Another thing that we should consider is mouse input.

727
00:38:23,780 --> 00:38:25,480
我们还没有真正用过它 
We haven't really used it yet.

728
00:38:25,480 --> 00:38:29,450
我想我以前已经提到过了 有点随意 
And I believe I've mentioned it before, slightly offhand.

729
00:38:29,450 --> 00:38:31,060
但Love2D让这一切变得超级简单 
But Love2D makes it super easy.

730
00:38:31,060 --> 00:38:33,761
这就像我们对键盘输入所做的那样 
It's just like we do with keyboard input.

731
00:38:33,761 --> 00:38:36,260
我们在Main Dot Lua中只有几个回调 
We just have a couple of callbacks that are in main dot Lua,

732
00:38:36,260 --> 00:38:38,390
按下鼠标 然后松开鼠标 
mouse pressed and mouse released.

733
00:38:38,390 --> 00:38:41,705
这些与按键和按键之间的区别
The difference between these and key pressed and key

734
00:38:41,705 --> 00:38:45,500
他们也会得到一个X和一个Y 因为通常 
released is that they also get an X and a Y. Because usually,

735
00:38:45,500 --> 00:38:47,420
当您单击鼠标或释放鼠标时 
when you click the mouse or release the mouse,

736
00:38:47,420 --> 00:38:49,461
你想知道是在哪里发生的 因为
you want to know where it happened because that's

737
00:38:49,461 --> 00:38:53,250
显然与你在使用鼠标时所做的事情有关 
obviously pertinent to what you're doing when you're using a mouse.

738
00:38:53,250 --> 00:38:58,940
因此 每当你点击或释放鼠标按键时 Love2D就会触发这些命令 
So these are fired by Love2D every time you click or release a mouse button.

739
00:38:58,940 --> 00:39:01,670
他们得到了X、Y和钥匙 而你
And they get the X the Y and the key, and you

740
00:39:01,670 --> 00:39:03,350
你可以用这些东西做任何你想做的事 
can do whatever you want with those.

741
00:39:03,350 --> 00:39:05,900
就像我们在之前的课程中所做的那样
And just as we've done in prior lectures so

742
00:39:05,900 --> 00:39:10,220
我们可以在主点Lua之外的其他模块中使用鼠标输入 
that we can use mouse input in other modules besides main dot Lua,

743
00:39:10,220 --> 00:39:13,505
有一个功能叫爱点鼠标点按键和按键
there's a function called love dot mouse dot key pressed and key

744
00:39:13,505 --> 00:39:15,341
发布了我在Main Dot Lua中实现的 
released that I implemented in main dot Lua.

745
00:39:15,341 --> 00:39:16,340
你可以去看看那些 
You can check those out.

746
00:39:16,340 --> 00:39:20,540
它们与我们之前制作键盘输入表的方式非常相似 
They're very similar to how we did the input tables for the keyboard before.

747
00:39:20,540 --> 00:39:24,020
但它们允许我们在内部使用此功能
But they allow us to use this functionality inside

748
00:39:24,020 --> 00:39:30,350
除了Main Dot Lua之外的其他函数、其他模块 
of other functions, other modules, besides main dot Lua.

749
00:39:30,350 --> 00:39:35,180
所以让我们继续下去 开始看--
So let's go ahead and start looking at--

750
00:39:35,180 --> 00:39:42,140
这就是我们开始寻找《愤怒的小鸟》发行版的地方
this is where we're going to start looking at the distro for Angry Birds

751
00:39:42,140 --> 00:39:46,489
以及我们如何将所有这些棋子组合成一场真正的游戏 
and how we can take all these pieces and form them into an actual game.

752
00:39:46,489 --> 00:39:49,530
所以我们要做的第一件事 我们将只看几件事
So the first thing we'll do, we'll take a look at just a couple of things

753
00:39:49,530 --> 00:39:51,530
然后我们会休息一会儿 然后我们会
and then we'll take a short break and then we'll

754
00:39:51,530 --> 00:39:53,150
更深入地了解其中的实质 
get more into the meat of it.

755
00:39:53,150 --> 00:39:55,820
但让我继续下去 把所有这些都清除掉 
But let me go ahead and clear out all of these.

756
00:39:58,800 --> 00:40:02,460
然后我们要拉起--所以发行版是愤怒的50 
And then we're going to pull up-- so the distro is in Angry 50.

757
00:40:02,460 --> 00:40:06,270
所以Main Dot Lua就在这里 
And so main dot Lua is here.

758
00:40:06,270 --> 00:40:08,280
所以在这里并没有什么不同 
So not a whole lot is different in here.

759
00:40:08,280 --> 00:40:11,700
所以我们在游戏中有两种状态 
So we have two states in our game.

760
00:40:11,700 --> 00:40:14,490
所以我们有一个开始和一个比赛状态 就像我们之前看到的 
So we had a start and a play state, as we saw before.

761
00:40:14,490 --> 00:40:16,810
开始状态和我们以前做过的一样 
The start state is like we've done before.

762
00:40:16,810 --> 00:40:20,070
唯一的区别是在这个开始状态下 嗯 首先 
The only difference is in this start state, well, for one,

763
00:40:20,070 --> 00:40:22,020
它正在运行Box2D模拟 
it's running a Box2D simulation.

764
00:40:22,020 --> 00:40:25,800
第二 我们实际上使用的是鼠标输入 
And two, we're actually using mouse input.

765
00:40:25,800 --> 00:40:27,780
所以实际上 让我们看看Main 这样你就可以
So actually, let's look at main so you can

766
00:40:27,780 --> 00:40:31,540
看看我在哪里添加了这个 这与以前不同 
see where I've added this, which is different than before.

767
00:40:31,540 --> 00:40:35,310
所以我们按下了Love的点键 就像我们以前看到的那样 
So we have love dot key pressed, as we've seen before.

768
00:40:35,310 --> 00:40:38,520
但我们也有按下鼠标和释放鼠标的方法 
But we also have mouse pressed and mouse released.

769
00:40:38,520 --> 00:40:40,660
然后按下鼠标 松开鼠标 
And then mouse was pressed and mouse was released.

770
00:40:40,660 --> 00:40:44,340
这些是这次Main Dot Lua的主要不同之处 而不是
So those are the main differences in main dot Lua this time, as opposed

771
00:40:44,340 --> 00:40:49,020
上一节课 我们只用键盘输入 
to last prior lectures, which we only had keyboard input.

772
00:40:49,020 --> 00:40:53,490
正如您在这里看到的 我们有按下和释放键的输入表
And as you can see here, we have input tables for keys pressed and released

773
00:40:53,490 --> 00:40:54,570
在鼠标上 
on the mouse.

774
00:40:54,570 --> 00:40:57,870
因此 我们将其初始化为在每个更新帧上清空
And so we initialized those to empty on every update frame

775
00:40:57,870 --> 00:41:00,840
就像我们对键盘所做的那样 
just like we've done with the keyboard.

776
00:41:00,840 --> 00:41:05,820
然后在回调函数中更新输入表
And then the input tables get updated in the callback functions

777
00:41:05,820 --> 00:41:07,517
就像我们以前做过的那样 
as we've done before.

778
00:41:07,517 --> 00:41:10,600
这就是这次Main Dot Lua的所有不同之处 
And so that's basically all that's different about main dot Lua this time.

779
00:41:10,600 --> 00:41:15,540
这就是我们将刚刚推出的新鼠标功能捆绑在一起的方式
And that's how we've tied together the new mouse functions that we've just

780
00:41:15,540 --> 00:41:17,040
看着我们的比赛 
looked at into our game.

781
00:41:19,830 --> 00:41:24,270
我们的游戏中存在的状态是PLAY状态和START状态 
The states that exist in our game are play state and start state.

782
00:41:24,270 --> 00:41:25,110
非常简单 
So very simple.

783
00:41:25,110 --> 00:41:27,480
非常类似于上周我们观看塞尔达的比赛 
Very similar to last week where we looked at Zelda,

784
00:41:27,480 --> 00:41:31,470
我们基本上只有一个开始状态和一个比赛状态 
we only basically had a start state and a play state.

785
00:41:31,470 --> 00:41:37,860
开始状态 我们可以在这里看到 只是为了连接在一起
The start state, we can see here, just to tie together

786
00:41:37,860 --> 00:41:41,160
鼠标的最后一点用法 
the last bit of our usage of the mouse.

787
00:41:41,160 --> 00:41:43,920
爱点鼠标点被按下1点 
Love dot mouse dot was pressed 1.

788
00:41:43,920 --> 00:41:46,695
有人知道这个1是什么吗？
Does anybody know what this 1 is?

789
00:41:46,695 --> 00:41:48,120
观众：那是左键点击吗？
AUDIENCE: Is that left click?

790
00:41:48,120 --> 00:41:49,411
科尔顿·奥格登：点击鼠标左键 
COLTON OGDEN: It is left click.

791
00:41:49,411 --> 00:41:53,850
因此 Love2D会将整数值指定给所有鼠标按键 
So Love2D assigns integer values to all of your mouse buttons.

792
00:41:53,850 --> 00:41:58,230
而1传统上是左击的缺省值 
And 1 is traditionally the default value for left click.

793
00:41:58,230 --> 00:42:00,420
一些框架将使用0 
Some frameworks will use 0.

794
00:42:00,420 --> 00:42:06,300
但是Lua 1索引是从1开始的 而不是0 
But Lua, 1 index so start with 1 instead of 0.

795
00:42:06,300 --> 00:42:10,810
关于这里的开始状态 这是一种酷和有趣的事情 
The thing about the start state here that's kind of cool and interesting.

796
00:42:10,810 --> 00:42:18,030
所以我要继续下去 再玩一次 这个游戏 
So I'm going to go ahead and play it again, the game.

797
00:42:18,030 --> 00:42:21,440
所以我们一开始就开始 只是为了让事情变得有趣
So we start off and right off the gate, just to make things interesting

798
00:42:21,440 --> 00:42:23,940
而不是只有一个静态屏幕 上面显示
rather than just have a static screen that says

799
00:42:23,940 --> 00:42:28,050
愤怒50点击开始 我们实际上正在运行一个Love2D 
Anger 50 click to start, we're actually running a Love2D,

800
00:42:28,050 --> 00:42:30,790
在这里进行Box2D模拟 
a Box2D simulation here.

801
00:42:30,790 --> 00:42:33,720
这是一个有一堆方块的世界 
It's a world with a bunch of squares.

802
00:42:33,720 --> 00:42:37,812
那么 这些都是什么样的身体呢？
And so what kind of bodies are all of these?

803
00:42:37,812 --> 00:42:38,810
观众：[听不见] 
AUDIENCE: [INAUDIBLE].

804
00:42:38,810 --> 00:42:40,518
科尔顿·奥格登：它们都是有活力的物体 
COLTON OGDEN: They're all dynamic bodies.

805
00:42:40,518 --> 00:42:44,210
我们已经将它们全部封装起来 就像我们之前在球坑例子中所做的那样 
And we've encapsulated them all, just as we did before in the ball pit example,

806
00:42:44,210 --> 00:42:47,895
屏幕的左侧、右侧和底部都有一些看不见的静态体 
with some invisible static bodies on the left, right, and bottom of the screen.

807
00:42:47,895 --> 00:42:49,770
因为如果我们没有那些静止的物体
Because if we didn't have those static bodies

808
00:42:49,770 --> 00:42:52,980
它们只会一路往下掉 
they would just fall all the way down.

809
00:42:52,980 --> 00:42:56,100
最好的是 我们实际上不需要渲染任何东西 
And the nice thing is we don't actually have to render anything.

810
00:42:56,100 --> 00:43:01,850
所以如果你想在你的游戏中为某些东西设置一个无形的障碍 
So if you want maybe an invisible barrier for something in your game,

811
00:43:01,850 --> 00:43:04,364
或者你想要封装一些东西 一些物质上的东西 
or you want to encapsulate something, something physical,

812
00:43:04,364 --> 00:43:05,780
您不必渲染任何内容 
you don't have to render anything.

813
00:43:05,780 --> 00:43:10,160
你可以只拥有任意形状和位置的静态物体 
You can just have arbitrarily shaped and positioned static bodies.

814
00:43:10,160 --> 00:43:11,977
而这将充当一个容器 
And that will act as a container.

815
00:43:11,977 --> 00:43:13,310
这就是我们在那里所做的一切 
So that's all we're doing there.

816
00:43:13,310 --> 00:43:17,960
我们为我们所有的小正方形外星人准备了一个集装箱 
We have a container set for all of our little square alien guys.

817
00:43:17,960 --> 00:43:22,580
我认为 通过创造100个这样的物体 然后让它们掉落 
And by creating, I think, a hundred of them and just letting them drop,

818
00:43:22,580 --> 00:43:27,140
我们的游戏有一个有趣的视觉开始
we have this interesting visual start to our game

819
00:43:27,140 --> 00:43:29,310
只需非常非常小的努力 
with very, very minimal effort.

820
00:43:29,310 --> 00:43:31,340
让我们来看看这个 
So we can take a look at this.

821
00:43:31,340 --> 00:43:36,260
所以在我们的开始状态init中 正如我之前所说的 我们有一个世界 
So in our start state init, as I said before, we have a world.

822
00:43:36,260 --> 00:43:38,570
我们显然需要一个新世界的成员 
We obviously need a member of new world.

823
00:43:38,570 --> 00:43:40,670
任何时候我们做任何Box2D的事情你都必须开始
Anytime we do any Box2D stuff you have to start

824
00:43:40,670 --> 00:43:43,185
通过让爱点缀新世界 物理点点新世界
by having a love dot physics dot new world,

825
00:43:43,185 --> 00:43:46,730
否则 您将无法运行任何模拟 
else you won't be able to run any simulations.

826
00:43:46,730 --> 00:43:51,740
建造一片地面 一堵墙 然后是一群外星人 
Going to create a ground, walls, and then a bunch of aliens.

827
00:43:51,740 --> 00:43:57,630
所以在这里 我们可以看到我们有一个表格 我们正在向其中插入外星人 
So this here, we can see that we have a table that we're inserting aliens into.

828
00:43:57,630 --> 00:44:00,980
但我们有一个班级叫外星人 
But we have a class called alien.

829
00:44:00,980 --> 00:44:04,520
所以 有没有人想大致了解一下外星人的职业
So anybody want to ballpark what an alien class ultimately

830
00:44:04,520 --> 00:44:05,930
封装了还是最终是？
encapsulates or ultimately is?

831
00:44:10,421 --> 00:44:15,694
观众：可能是它的外观 就像皮肤一样 
AUDIENCE: Probably the way it looks, like the skin.

832
00:44:15,694 --> 00:44:18,110
科尔顿·奥格登：是的 这绝对是其中的一部分 
COLTON OGDEN: It is, yeah, that's definitely a part of it.

833
00:44:18,110 --> 00:44:19,880
所以它看起来 或者是它的皮肤 
So the way it looks, or it's skin.

834
00:44:19,880 --> 00:44:23,210
所以它确实提到了这一点 
So it does have a reference to that.

835
00:44:23,210 --> 00:44:31,970
然后更多的功能 它还拥有一个身体和一个固定装置 
And then more functionally, it also possesses a body and a fixture.

836
00:44:31,970 --> 00:44:35,000
因此 与其让一堆身体和固定装置
So rather than having a bunch of bodies and fixtures

837
00:44:35,000 --> 00:44:38,780
它们是分开的 可能只在桌子上
that are separated out and maybe just in tables

838
00:44:38,780 --> 00:44:44,240
在任何东西的表面水平上 我们的水平 只需将它们包装在一个类中 
at the surface level of whatever, our level, just wrap them in a class.

839
00:44:44,240 --> 00:44:46,370
然后我们就可以保持一个引用
And then we just can maintain a reference

840
00:44:46,370 --> 00:44:50,630
每一个外星人的身体和固定装置 
to each individual alien's body and fixture that way.

841
00:44:50,630 --> 00:44:53,240
所以它更具封装性 
So it's a little bit more encapsulated.

842
00:44:53,240 --> 00:44:57,500
在我看来 它更面向对象 更简洁 
It's a little bit more object oriented, little bit cleaner in my opinion.

843
00:44:57,500 --> 00:45:03,230
外星人阶级可以用正方形或圆形作为它的--
The alien class can take square or round as its--

844
00:45:03,230 --> 00:45:05,900
嗯 它可以接受任何你想要的类型 
well, it can take anything you want to as its type.

845
00:45:05,900 --> 00:45:09,290
因此 这最终将决定它是如何渲染的 以及它的形状 
So this will ultimately decide how it's rendered and what shape it gets.

846
00:45:09,290 --> 00:45:13,670
但如果它是方形的 这是默认的 所以如果你只是
But if it's square, which is the default, so if you just

847
00:45:13,670 --> 00:45:18,020
创造一个没有类型的外星人 它会得到
create an alien with no type, it will get

848
00:45:18,020 --> 00:45:21,350
一个爱心网点 物理网点呈长方形 
a love dot physics dot rectangle shape.

849
00:45:21,350 --> 00:45:23,720
所以 正如我们之前看到的 这只是一个盒子 
So as we saw before, that's just a box.

850
00:45:23,720 --> 00:45:26,510
如果不是 我们就默认为圆形 
And then if not, we just default to circle shape.

851
00:45:26,510 --> 00:45:29,450
但你可以把它编程成你想要的任何形状 
But you could program it to take in whatever shape you want,

852
00:45:29,450 --> 00:45:30,980
然后就给它那个形状 
and then just give it that shape.

853
00:45:30,980 --> 00:45:33,230
你真的不需要做太多的事情
And you don't really have to do much in terms

854
00:45:33,230 --> 00:45:36,890
编码它如何与其他任何东西相互作用 至少在碰撞方面是这样 
of coding how it interacts with anything else in terms of collision, at least.

855
00:45:36,890 --> 00:45:40,220
因为 谢天谢地 Box2D会知道 好的 这是一个圆 
Because, thankfully, Box2D will know, OK, it's a circle.

856
00:45:40,220 --> 00:45:43,790
它应该旋转 并与像圆圈一样的东西互动 
It should spin around and interact with things like a circle.

857
00:45:43,790 --> 00:45:47,090
或者它是一个矩形 所以它应该与像盒子一样的东西交互 
Or it's a rectangle so it should interact with things like it's a box.

858
00:45:47,090 --> 00:45:48,680
只是又好又方便 
Just nice and convenient.

859
00:45:48,680 --> 00:45:52,070
然后我们将在这里创建一个固定装置 
And then we'll just create a fixture here.

860
00:45:52,070 --> 00:45:55,860
此处的设置用户数据功能很重要
This set user data function here is important

861
00:45:55,860 --> 00:46:01,850
因为我们将在我们如何实际解决碰撞的上下文中看到
because we'll see in the context of how we actually resolve collisions

862
00:46:01,850 --> 00:46:05,300
以定制的方式 我们需要用户数据
in a customized way, we'll need user data

863
00:46:05,300 --> 00:46:08,840
能够区分出在我们的世界中发生碰撞的东西 
to be able to differentiate what gets collided in our world.

864
00:46:08,840 --> 00:46:14,900
但目前你可以知道 这基本上允许我们进入--
But at the moment you can just know that this basically allows us to pass in--

865
00:46:14,900 --> 00:46:17,720
将任意数据设置到灯具上 
to set arbitrary data onto a fixture.

866
00:46:17,720 --> 00:46:22,850
所以我们可以说 灯具集用户数据外星人 串外星人 
So we can say, fixture set user data alien, the string alien.

867
00:46:22,850 --> 00:46:28,520
这意味着Fixture有一些关于它的定制元数据
And what that means is that fixture has some customized metadata about it that

868
00:46:28,520 --> 00:46:30,290
说 这是一个外星人 
says, this is an alien.

869
00:46:30,290 --> 00:46:31,892
这是我们想要用它做的任何事情 
It's whatever we want to do with it.

870
00:46:31,892 --> 00:46:33,350
我们也可以给这张桌子 
We could give this a table as well.

871
00:46:33,350 --> 00:46:35,570
我们可以这样说 用户数据是一个表
We could just say, the user data is a table

872
00:46:35,570 --> 00:46:40,190
然后有一堆信息 我们可以在碰撞时使用
and then has a bunch of information that we can then use at collision time

873
00:46:40,190 --> 00:46:42,050
对它进行不同的工作 
to perform different work on it.

874
00:46:42,050 --> 00:46:44,210
但是这个设置用户数据的功能是我们如何
But this set user data function is how we

875
00:46:44,210 --> 00:46:48,900
能够以不同的方式解决障碍和外星人之间的碰撞 
are able to resolve collisions between obstacles and aliens differently than,

876
00:46:48,900 --> 00:46:53,460
比如玩家和外星人 甚至外星人和地面 
say players and aliens, or even the alien and the ground.

877
00:46:53,460 --> 00:46:57,110
因为当我们做任何Box2D碰撞时 对 世界
Because when we do any Box2D collision, right, the world's

878
00:46:57,110 --> 00:46:59,150
为我们解决碰撞问题 
taking care of the collisions for us.

879
00:46:59,150 --> 00:47:04,460
我们如何告诉世界 好吧 当我落地时 我想要播放一个声音 
How do we tell the world, OK, when I hit the ground I want to play a sound,

880
00:47:04,460 --> 00:47:05,810
但什么都不做 
but not do anything.

881
00:47:05,810 --> 00:47:10,130
如果我以这个速度撞击这个盒子 我想让它摧毁它 
If I hit this box at this velocity, I want it to destroy it.

882
00:47:10,130 --> 00:47:12,860
如果我击中外星人 我希望外星人消失
If I hit the alien, I want the alien to disappear

883
00:47:12,860 --> 00:47:16,280
我想展示一个胜利的标签 
and I want to show a victory label.

884
00:47:16,280 --> 00:47:18,890
我们如何做所有这些不同的事情？
How do we do all these different things?

885
00:47:18,890 --> 00:47:21,770
我们通过所谓的冲突回调来做到这一点
We do that with what are called collision callbacks

886
00:47:21,770 --> 00:47:23,400
在Box2D的上下文中 
in the context of Box2D.

887
00:47:23,400 --> 00:47:24,720
我们将拭目以待 
And we'll see how that works.

888
00:47:24,720 --> 00:47:30,870
但可以说 用户数据将是非常重要的 
But suffice to say, user data will be very important coming forward.

889
00:47:30,870 --> 00:47:33,350
然后这个推出了假的 实际上我们并没有结束
And then this launched false, actually we don't end up

890
00:47:33,350 --> 00:47:34,910
使用这个 所以这是无关紧要的 
using this so this is irrelevant.

891
00:47:34,910 --> 00:47:43,190
但它在这里有一个渲染函数 它只接受身体X和Y
But it has a render function here, which just takes in the bodies X and Y

892
00:47:43,190 --> 00:47:46,242
并会以它所在的角度绘制它 
and will draw it at the angle that it's at.

893
00:47:46,242 --> 00:47:47,450
所以这是一件重要的事情 
So that's an important thing.

894
00:47:47,450 --> 00:47:52,400
以前 我们所做的是通过形状来画东西 
When we before, what we were doing is drawing things via shapes.

895
00:47:52,400 --> 00:47:55,790
所以爱点图形的点多边形 爱点图形的点圆 
So love dot graphics dot polygon, love dot graphics dot circle,

896
00:47:55,790 --> 00:47:57,710
喜欢网点图形的网点线 
love dot graphics dot line.

897
00:47:57,710 --> 00:48:03,440
但如果我们想要画一个精灵 我们
But if we want to draw a sprite instead, we

898
00:48:03,440 --> 00:48:06,440
首先需要把它画在正确的位置 对吗？
need to draw it at the right position, first of all, right?

899
00:48:06,440 --> 00:48:09,890
然后物体也会在Box2D中旋转 
And then things also rotate in Box2D.

900
00:48:09,890 --> 00:48:13,500
所以我们需要把它画在正确的角度 
So we need to draw it at the right angle.

901
00:48:13,500 --> 00:48:17,270
所以我们要做的是 我们可以在身体上查询它的X 
So what we do is we can actually query the body for its X.

902
00:48:17,270 --> 00:48:21,770
我们可以查询物体的Y 也可以查询物体的角度 
We can query the body for its Y. And we can also query the body for its angle.

903
00:48:21,770 --> 00:48:24,560
然后我们可以绘制纹理和四边形
And then we can draw the texture and the quad

904
00:48:24,560 --> 00:48:28,470
我们想要利用XY和角度 
that we want to using those XY and the angle,

905
00:48:28,470 --> 00:48:33,560
这将产生在世界上画出一个精灵的效果
and that will have the effect of drawing a sprite in the world that

906
00:48:33,560 --> 00:48:37,190
反映了Box2D中正在发生的事情 而不仅仅是一个简单的形状 
mirrors what's going on in Box2D, rather than just a simple shape.

907
00:48:37,190 --> 00:48:42,260
所以这就像画一个精灵而不是一个形状一样简单 
So that's as simple as it is for drawing a sprite instead of a shape.

908
00:48:42,260 --> 00:48:46,230
你可以在这里看到 17.5号高速公路 
You can see here, the 17.5 17.5.

909
00:48:46,230 --> 00:48:48,404
有人知道这是干嘛用的吗？
Does anybody know what that's for?

910
00:48:48,404 --> 00:48:49,240
观众：不确定 
AUDIENCE: Not sure.

911
00:48:49,240 --> 00:48:52,940
科尔顿·奥格登：所以17.5、17.5、17.5是宽度的一半
COLTON OGDEN: So 17.5 17.5 at the end is half of the width

912
00:48:52,940 --> 00:48:56,030
外星人身高的一半 
and half of the height of the aliens.

913
00:48:56,030 --> 00:48:58,670
所以外星人在这个游戏中是35乘35的 
So aliens are 35 by 35 in this game.

914
00:48:58,670 --> 00:49:00,050
我们把这些都传进去 
We pass those in.

915
00:49:00,050 --> 00:49:02,450
这是起源的中心 
This is the center of origin.

916
00:49:02,450 --> 00:49:05,600
所以当我们以原点为中心旋转物体时 
So when we rotate something by center of origin,

917
00:49:05,600 --> 00:49:11,620
它基本上描述了旋转将在哪里发生 
it basically describes where the rotation is going to take place.

918
00:49:11,620 --> 00:49:15,237
所以如果它绕着左上角旋转 我们旋转一些东西 
So if it's rotated about the top left and we rotate something,

919
00:49:15,237 --> 00:49:17,570
它会产生像精灵一样的效果
it's going to have the effect of the sprite going around

920
00:49:17,570 --> 00:49:20,150
以一种奇怪的方式围成一圈 
in a circle in sort of an odd way.

921
00:49:20,150 --> 00:49:23,960
如果我们基于实际精灵的原点旋转精灵
If we rotate the sprite based on the center of origin of the actual sprite

922
00:49:23,960 --> 00:49:28,760
本身 这将具有在其中心旋转精灵的效果 
itself, that will have the effect of rotating the sprite on its center.

923
00:49:28,760 --> 00:49:31,520
因此 您可以将原点设置为您想要设置位置
So you can set that origin wherever you want to

924
00:49:31,520 --> 00:49:35,180
它将围绕该点进行360度旋转 
and it'll perform a 360 degree rotation about that point.

925
00:49:35,180 --> 00:49:37,590
我们将这一点设定为一半--
And we're setting that point to half--

926
00:49:37,590 --> 00:49:40,040
基本上到我们画精灵的中间 
to basically the middle of where we're drawing the sprite.

927
00:49:40,040 --> 00:49:42,720
所以当我们给它这个角度时 它会产生这样的效果 
So that will have the effect of when we give it this angle here,

928
00:49:42,720 --> 00:49:46,880
自身网体要获得角度 旋转时就会发生在原地 
self dot body to get angle, the rotation will take place in place.

929
00:49:46,880 --> 00:49:50,570
这不会发生--左上角不会有什么奇怪的事情
It won't take place-- it won't be some sort of weird about the top left corner

930
00:49:50,570 --> 00:49:52,770
轮换 这不是我们想要的 
rotation, which is not what we want.

931
00:49:52,770 --> 00:49:55,840
因此 当你看到起源中心被这样修改时 
So when you see center of origin being modified like that,

932
00:49:55,840 --> 00:49:58,610
你可以假设这是因为我们有一个偏移量
you can assume that it's because we have an offset

933
00:49:58,610 --> 00:50:01,550
我们试图找到我们所画的地方的中心
and we're trying to find the center of where we're drawing

934
00:50:01,550 --> 00:50:04,980
然后绕着它旋转 做一个原地旋转 
and rotate about that to do an in place rotation.

935
00:50:04,980 --> 00:50:08,720
但不一定 你也可以画一些东西 
But not necessarily, you could also draw something.

936
00:50:08,720 --> 00:50:12,800
你也可以 也许你想要某种神奇的能量球
You could also, maybe you want something some sort of magical ball of energy

937
00:50:12,800 --> 00:50:15,230
绕着棍子或其他东西旋转 
to rotate about a rod or something.

938
00:50:15,230 --> 00:50:17,780
所以你想让它绕着不同的中心旋转 
And so you want it to rotate around a different center,

939
00:50:17,780 --> 00:50:20,660
或者你随意想要的任何东西 
or whatever you want arbitrarily.

940
00:50:20,660 --> 00:50:23,840
但通常情况下 至少在我见过的大部分情况下 
But typically, at least mostly that I've seen,

941
00:50:23,840 --> 00:50:27,950
这对于确保您的旋转 您的原地旋转 
this is useful for making sure that your rotations, your in place rotations,

942
00:50:27,950 --> 00:50:29,360
被准确地渲染 
are accurately rendered.

943
00:50:29,360 --> 00:50:33,320
关于外星人职业是如何工作的 有什么问题吗？
So any questions about how the alien class works?

944
00:50:36,860 --> 00:50:38,340
好的 
All right.

945
00:50:38,340 --> 00:50:40,650
这就是外星人班级 
So that's the alien class.

946
00:50:40,650 --> 00:50:44,160
这基本上是我们游戏的基本组成部分 
That's the basically the fundamental building block of our game.

947
00:50:44,160 --> 00:50:48,120
另一个部分是障碍 
The other part is the obstacle.

948
00:50:48,120 --> 00:50:50,280
我们有障碍 我们有外星人 
We have obstacles and we have aliens.

949
00:50:50,280 --> 00:50:53,610
障碍物和外星人实际上非常相似 
The obstacles and aliens are actually very similar.

950
00:50:53,610 --> 00:50:55,560
那么 这两者有什么不同呢？
So what's the difference between--

951
00:50:55,560 --> 00:50:58,080
我的意思是 归根结底 它们有什么相似之处？
I mean, ultimately, how are they similar?

952
00:51:03,470 --> 00:51:05,430
观众：他们都很有活力 
AUDIENCE: They're both dynamic [INAUDIBLE]..

953
00:51:05,430 --> 00:51:07,580
科尔顿·奥格登：是的 它们都是充满活力的物体 
COLTON OGDEN: They're both dynamic bodies, yeah.

954
00:51:07,580 --> 00:51:11,720
真的 障碍物和外星人唯一不同的是
Really, the only thing that's different about a obstacle and an alien

955
00:51:11,720 --> 00:51:14,570
是我们在场景中如何处理它们以及它们是如何渲染的 
is what we do with them in our scene and how they're rendered.

956
00:51:14,570 --> 00:51:16,760
但它们的功能非常相似 
But they function very similarly.

957
00:51:16,760 --> 00:51:18,950
它们只是我们赋予其形状的动态体
They're just dynamic bodies that we give a shape to

958
00:51:18,950 --> 00:51:21,200
我们把它们渲染成那个形状 
and we render them with that shape.

959
00:51:24,680 --> 00:51:28,670
在这种情况下 障碍构造器 我们已经
In this case, the obstacle constructor, we've

960
00:51:28,670 --> 00:51:33,540
我决定把它设计成水平或垂直的形状 
decided to design it such that it could take a shape horizontal or vertical,

961
00:51:33,540 --> 00:51:36,620
这与我们之前看到的外星人的类型相似 
which is similar to the type that we saw before with the alien,

962
00:51:36,620 --> 00:51:38,840
它可以是正方形也可以是圆形 
where it could be square or circular.

963
00:51:38,840 --> 00:51:45,860
在这种情况下 如果我们回过头来看看我们的精灵工作表 
In this case, if we look back at our sprite sheet back here,

964
00:51:45,860 --> 00:51:48,124
我们可以看到有一大堆不同的形状 
we can see there's a ton of different shapes.

965
00:51:48,124 --> 00:51:51,290
但我们在这个游戏中要用到的只有两个形状 
But the only two shapes that we're going to use in the context of this game,

966
00:51:51,290 --> 00:51:55,970
仅为演示 这里是水平的、干净的木制形状
just for this demonstration, are the horizontal, clean wooden shape here

967
00:51:55,970 --> 00:51:59,150
还有这个垂直的 就在这里 
and the vertical one that's right here.

968
00:51:59,150 --> 00:52:02,120
所以为了找出这些东西 我不得不敞开心扉
And so in order to find those out I had to open up

969
00:52:02,120 --> 00:52:05,567
基本上就是我的精灵编辑器中的这个精灵 
basically this sprite in my sprite editor,

970
00:52:05,567 --> 00:52:08,150
找出XY宽度和高度的位置 然后创建
figure out where the XY width and height were, and then create

971
00:52:08,150 --> 00:52:10,340
一个四人手动队离开那里 
a quad manually off of that.

972
00:52:10,340 --> 00:52:14,120
然后我编辑了util点Lua--或者不是util点Lua 
And then I edited the util dot Lua-- or not util dot Lua,

973
00:52:14,120 --> 00:52:17,480
依赖关系在这里点缀着Lua 
the dependencies dot Lua here.

974
00:52:17,480 --> 00:52:21,050
正常情况下 我们只需创建框架 然后使用生成四边形 
Normally we just create gframes and then we use generate quads.

975
00:52:21,050 --> 00:52:25,460
你可以像对待外星人一样 用瓷砖 瓷砖
And you can do that like with the aliens and with the tiles, the tiles

976
00:52:25,460 --> 00:52:28,190
就是这张精灵床单--
being this sprite sheet that--

977
00:52:28,190 --> 00:52:29,510
这个就在这里 
this one right here.

978
00:52:29,510 --> 00:52:31,310
这些是35乘35的 
These are 35 by 35.

979
00:52:31,310 --> 00:52:32,720
这些是35乘35的 
These are 35 by 35.

980
00:52:32,720 --> 00:52:34,130
这些不是35x35 
These are not 35 by 35.

981
00:52:34,130 --> 00:52:38,280
这些是一堆不同形状和大小的东西 
These are a bunch of different shapes and sizes.

982
00:52:38,280 --> 00:52:47,840
所以我检查了一下 格框木板是用来手工制作四边形的 
So I went through and gframes wood is for manually created quads here.

983
00:52:47,840 --> 00:52:53,540
然后是四个 因为我还添加了半断线的形状 
And then there's four because I also added the semi broken shapes as well.

984
00:52:53,540 --> 00:52:55,820
但我们实际上并不使用这些 
But we don't actually use those.

985
00:52:55,820 --> 00:53:03,100
但你可以决定在碰撞时把这些变成这些 
But you could decide to turn these into these on collision,

986
00:53:03,100 --> 00:53:06,350
也许如果速度还不够强 不足以打破它 
perhaps maybe if the velocity isn't strong enough to break it necessarily,

987
00:53:06,350 --> 00:53:09,740
但你想要得到某种反馈 说你与它发生了冲突 
but you want to have some sort of feedback that you collided with it.

988
00:53:09,740 --> 00:53:15,140
您只需将该对象的碰撞帧设置为1或2即可 
You can just set maybe the frame to 1 or 2 on collision for that object,

989
00:53:15,140 --> 00:53:18,950
而不是2 并适当地渲染它 
instead of 2 and render it appropriately.

990
00:53:18,950 --> 00:53:21,380
但如果你面对的是精灵床单
But if you're dealing with a sprite sheet

991
00:53:21,380 --> 00:53:26,450
而那张精灵纸上的精灵分布得很奇怪 
and that sprite sheet has odd distribution of its sprites,

992
00:53:26,450 --> 00:53:29,480
有时 您必须手动找出偏移量的位置
sometimes you have to figure out where the offsets are manually

993
00:53:29,480 --> 00:53:31,190
然后用这种方式来做 
and do it that way.

994
00:53:31,190 --> 00:53:34,910
理想的情况是 您不必这样做 并且可以通过编程来完成 
The ideal is that you don't have to and that you can do it programmatically.

995
00:53:34,910 --> 00:53:38,270
但这真的取决于游戏 你的域名是什么
But it really depends on the game, what your domain is

996
00:53:38,270 --> 00:53:42,090
以及您在场景中与哪些对象交互 
and what objects you're interacting with in the scene.

997
00:53:42,090 --> 00:53:44,950
对于为什么或如何做到这一点 有什么问题吗？
Any questions on the why or how as to that?

998
00:53:47,700 --> 00:53:48,320
凉爽的 
Cool.

999
00:53:48,320 --> 00:53:51,780
那么回到障碍上来吧 
So back to the obstacle.

1000
00:53:51,780 --> 00:53:54,020
所以它们是水平的或垂直的 这是
So they're horizontal or vertical, and what that does

1001
00:53:54,020 --> 00:53:55,730
是将帧设置为2还是4 
is it sets the frame to 2 or 4.

1002
00:53:55,730 --> 00:54:02,180
两个或四个在框架中 我有一只手的四个四边形 
And the 2 or 4 being in gframes that would, the 4 quads that I had a hand,

1003
00:54:02,180 --> 00:54:03,620
计算出的坐标 
figure out the coordinates for.

1004
00:54:06,350 --> 00:54:09,800
真的 在这一点上并没有太大的不同 
And really, it's not a whole lot different at that point.

1005
00:54:09,800 --> 00:54:15,260
如果它是水平或垂直的形状 
If it's a horizontal or a vertical shape,

1006
00:54:15,260 --> 00:54:17,690
然后我们需要适当地设置它的宽度和高度 
then we need to set its width and height appropriately.

1007
00:54:17,690 --> 00:54:19,820
因为它会有不同的宽度和高度 
Because it's going to have a different width and a different height.

1008
00:54:19,820 --> 00:54:22,770
如果它是垂直的 显然高度高于宽度 
If it's vertical, obviously the height is higher than the width.

1009
00:54:22,770 --> 00:54:25,910
如果它是水平的 情况正好相反 
And if it's horizontal, the opposite is true.

1010
00:54:25,910 --> 00:54:27,929
但它们都是长方形的 
But they're both a rectangle shape.

1011
00:54:27,929 --> 00:54:29,720
这样你就可以传递宽度和高度
So you can pass in the width and the height

1012
00:54:29,720 --> 00:54:32,520
在你计算之后 并给它正确的形状 
after you calculate that, and give it the right shape,

1013
00:54:32,520 --> 00:54:33,770
然后将其归因于一种固定装置 
and then ascribe it a fixture.

1014
00:54:33,770 --> 00:54:37,310
然后设置用户数据在这种情况下 我们将用户数据设置为障碍 
And then set user data in this case, we set user data to obstacle.

1015
00:54:37,310 --> 00:54:40,760
所以现在这个障碍 特别是固定装置 
So now that obstacle, the fixture specifically,

1016
00:54:40,760 --> 00:54:45,080
知道这是一种障碍 而不是作为一个外星人 而不是
knows that it's an obstacle, as opposed to being an alien, as opposed

1017
00:54:45,080 --> 00:54:47,510
成为其他任何东西 而不是成为地面 
to being anything else, as opposed to being the ground.

1018
00:54:47,510 --> 00:54:54,500
因此 当我们在几分钟内探索什么定制碰撞 世界
And so when we explore in a few minutes what the custom collision, world

1019
00:54:54,500 --> 00:54:56,420
碰撞回调 我们实际上可以
collision callbacks, that we can actually

1020
00:54:56,420 --> 00:54:58,940
定义所有这些有趣的碰撞行为 
define all this interesting collision behavior for,

1021
00:54:58,940 --> 00:55:01,370
这些用户数据将是相关的 
this user data is going to be relevant.

1022
00:55:01,370 --> 00:55:08,310
然后我们像以前一样渲染外星人一样渲染它 
And then we render it just like we render the alien as before.

1023
00:55:08,310 --> 00:55:10,875
所以任何关于障碍物和外星人的问题 它们有什么不同 
So any questions on obstacles and aliens, how they differ,

1024
00:55:10,875 --> 00:55:11,750
它们有什么相同之处？
how they're the same?

1025
00:55:14,588 --> 00:55:15,750
凉爽的 
Cool.

1026
00:55:15,750 --> 00:55:16,250
好的 
All right.

1027
00:55:16,250 --> 00:55:18,500
现在让我们休息五分钟 
Let's take a five minute now.

1028
00:55:18,500 --> 00:55:21,710
当我们回来时 我们将实际查看播放状态 
When we get back, we're going to actually look at the play state.

1029
00:55:21,710 --> 00:55:23,870
我们来看看怎样才能达到水平 
We're going to look at what makes a level.

1030
00:55:23,870 --> 00:55:27,650
我们将真正了解如何定制这个世界
And we're going to actually look at how we can customize the world

1031
00:55:27,650 --> 00:55:32,480
以与我们的游戏行为相关的方式解决冲突 
to resolve collisions in ways that are relevant to our game behavior.

1032
00:55:32,480 --> 00:55:36,080
比如 当我们与物体相撞时 如何让它们破碎 
As in, how to make things break when we collide with them,

1033
00:55:36,080 --> 00:55:40,310
当我们摧毁这只鸟时 如何让胜利屏幕弹出来 
how to make the victory screen pop up when we've destroyed the bird,

1034
00:55:40,310 --> 00:55:41,240
以此类推 
so on and so forth.

1035
00:55:43,971 --> 00:55:44,470
好的 
All right.

1036
00:55:44,470 --> 00:55:45,250
欢迎回来 
Welcome back.

1037
00:55:45,250 --> 00:55:47,110
所以在我们休息之前 我们在谈论
So before we took a break, we were talking

1038
00:55:47,110 --> 00:55:51,120
关于我们游戏中的外星人和障碍
about the aliens and obstacles that are in our game

1039
00:55:51,120 --> 00:55:52,880
相互影响的世界 
world that interact with each other.

1040
00:55:52,880 --> 00:55:58,900
他们是让我们的游戏大幅削减《愤怒的小鸟》发挥作用的支柱 
They are the backbone of what makes our games slash Angry Birds work.

1041
00:55:58,900 --> 00:56:02,170
你把外星人扔进障碍物 障碍物就会被打破 
You throw aliens into the obstacles, obstacles break,

1042
00:56:02,170 --> 00:56:07,660
坏猪砍死外星人 然后你就得分了 
the bad pigs slash aliens die and then you score points.

1043
00:56:07,660 --> 00:56:10,120
但我们实际上必须对这些相互作用进行建模
But we actually have to model these interactions

1044
00:56:10,120 --> 00:56:13,030
我们必须告诉我们的游戏 我们的世界 什么
and we have to tell our game, our world, what

1045
00:56:13,030 --> 00:56:16,900
当这些碰撞发生时 为了让事情变得更有趣
to do when these collisions happen in order for things more interesting

1046
00:56:16,900 --> 00:56:19,354
而不仅仅是物体相互弹跳才能工作 
than just things bouncing off each other to work.

1047
00:56:19,354 --> 00:56:20,520
这是默认行为 
That's the default behavior.

1048
00:56:20,520 --> 00:56:26,230
默认情况下 Box2D的目标是当两个物体重叠时 
Box2D's goal, by default, is when two things overlap,

1049
00:56:26,230 --> 00:56:29,170
假设它们是动态的 或者至少其中一个是动态的 
assuming that they're dynamic or at least one of them is dynamic,

1050
00:56:29,170 --> 00:56:34,840
就是推开动态物体 直到它们不再重叠
is to push the dynamic bodies away until they no longer overlap

1051
00:56:34,840 --> 00:56:38,950
通过位置或旋转 
via either position or rotation.

1052
00:56:38,950 --> 00:56:42,640
但这不是我们比赛的主旨或目标 
But that's not the gist or the goal of our game.

1053
00:56:42,640 --> 00:56:45,490
因为我们希望发生的是不同的事情发生
Because what we want to have happen is different things happen

1054
00:56:45,490 --> 00:56:49,330
某些东西消失了 破碎了 还有各种各样的其他东西
and certain things to disappear and to break and all sorts of other things

1055
00:56:49,330 --> 00:56:52,210
当不同种类的物体
to happen when different kinds of objects

1056
00:56:52,210 --> 00:56:56,290
以不同的速度与不同类型的物体交互 
interact with different kinds of objects at differing speeds.

1057
00:56:56,290 --> 00:57:00,790
因此 为了做到这一点 我们需要定义冲突回调
So in order to do this, we need to define collision callbacks

1058
00:57:00,790 --> 00:57:01,630
为了我们的世界 
for our world.

1059
00:57:01,630 --> 00:57:04,810
因此 回调 recall 是一个函数 它得到
So a callback, recall, is a function that gets

1060
00:57:04,810 --> 00:57:06,850
出事的时候给我回电话 
called back when something happens.

1061
00:57:06,850 --> 00:57:12,950
它只是在特定时间或以后会被调用的东西 
It's just something that will get called at a specific time or later on.

1062
00:57:12,950 --> 00:57:16,090
我们可以为我们的世界定义这些回调
And we can define these callbacks for our world

1063
00:57:16,090 --> 00:57:19,210
这样当两个物体相互碰撞时 
such that when two things collide with each other,

1064
00:57:19,210 --> 00:57:23,350
它将执行此回调 然后执行相应的逻辑
it will execute this call back and then perform the corresponding logic

1065
00:57:23,350 --> 00:57:25,750
这是我们在其中定义的 
that we've defined therein.

1066
00:57:25,750 --> 00:57:30,850
对于Box2D中的每个冲突 都会发生四个回调 
And with every collision in Box2D, there are four callbacks that take place.

1067
00:57:30,850 --> 00:57:35,770
有开始接触 所以当两件事开始重叠时
There's begin contact, so when two things begin to overlap

1068
00:57:35,770 --> 00:57:37,630
或者开始彼此联系 
or begin to contact one another.

1069
00:57:37,630 --> 00:57:40,480
结束接触 所以一旦结束 一旦两个物体
End contact, so once that ends, once two objects

1070
00:57:40,480 --> 00:57:42,990
被彼此推开 
are pushed away from each other.

1071
00:57:42,990 --> 00:57:46,270
已预先解决 这发生在碰撞实际得到
Presolved, which happens right before the collision actually gets

1072
00:57:46,270 --> 00:57:50,200
在Box2D中解决 这意味着这些东西相互推开 
solved in Box2D, meaning that the things get pushed away from each other.

1073
00:57:50,200 --> 00:57:54,130
然后后解决 意思是在他们被推开之后 
And then postsolved, meaning right after they get pushed away from each other.

1074
00:57:54,130 --> 00:57:58,040
尤其是后解题很有趣
And the postsolved in particular is interesting

1075
00:57:58,040 --> 00:58:02,540
因为它获得了有关如何解决冲突的信息 
because it gets the information about how the collision needed to resolve.

1076
00:58:02,540 --> 00:58:08,650
那么在这种相互作用中需要多大的速度或自转 
So how much velocity or rotation needed to happen within that interaction.

1077
00:58:08,650 --> 00:58:12,340
我们不会使用末端接触、预解算或后解算 
And we will not be using end contact, presolve, or postsolve.

1078
00:58:12,340 --> 00:58:15,370
我们将只使用Begin Contact 因为 真的
We will only be using begin contact because, really, that's

1079
00:58:15,370 --> 00:58:18,612
我们所需要的就是模拟我们正在寻找的行为 
all we need in order to model the behavior that we're looking for.

1080
00:58:18,612 --> 00:58:20,320
因为在我们的游戏中发生的任何事情
Because anything that happens in our game

1081
00:58:20,320 --> 00:58:23,170
只要两个物体相互接触 我们就能搞清楚 
we can just figure it out as soon as two objects touch each other.

1082
00:58:25,730 --> 00:58:28,600
这些都是 如果你对一个教程感兴趣的话
And these are things, if you're interested in a tutorial that

1083
00:58:28,600 --> 00:58:31,420
可能会更详细地介绍这些内容 
goes over these in perhaps a little bit more detail,

1084
00:58:31,420 --> 00:58:33,520
幻灯片中有一个链接 
there's a link here in the slides.

1085
00:58:33,520 --> 00:58:38,470
但我将向您展示如何自己实际实现这些回调 
But I'll show you how to actually implement these callbacks yourself.

1086
00:58:38,470 --> 00:58:42,040
这是通过一个名为World Set Callback的函数来实现的 
You do this via a function called world set callbacks,

1087
00:58:42,040 --> 00:58:45,110
在本例中为F1、F2、F3、F4 
in this case, F1, F2, F3, F4.

1088
00:58:45,110 --> 00:58:47,770
回想一下 因为Lua是一种动态语言 其中函数
And recall, because Lua is a dynamic language where functions

1089
00:58:47,770 --> 00:58:52,210
是第一类对象 则可以将函数作为参数传递
are first class objects, you can pass in functions as arguments

1090
00:58:52,210 --> 00:58:53,300
转到其他功能 
to other functions.

1091
00:58:53,300 --> 00:58:54,260
这就是我们在这里做的事情 
And that's what we're doing here.

1092
00:58:54,260 --> 00:58:56,218
假设我们有四个函数
So this is assuming that we have four functions

1093
00:58:56,218 --> 00:59:00,820
我们已经定义了开始接触 结束接触 解算前或解算后 
we've defined called begin contact, end contact. presolve, or postsolve.

1094
00:59:00,820 --> 00:59:03,250
他们的真实名字根本无关紧要 
Their actual names don't matter at all.

1095
00:59:03,250 --> 00:59:05,881
这些只是它们的实际名称 
These are just the de facto names for them.

1096
00:59:05,881 --> 00:59:09,130
重要的是 您在那里有逻辑 并且您传递函数对象
What matters is that you have the logic there and you pass in function objects

1097
00:59:09,130 --> 00:59:11,170
它们会表现出一些东西 
that perform something.

1098
00:59:11,170 --> 00:59:15,130
并且您可以传入所有空函数 而Box2D仍将正常运行 
And you can pass in all empty functions and Box2D will still behave as normal.

1099
00:59:15,130 --> 00:59:20,680
只有当你想要更复杂的行为从你的游戏中消失的时候 这些才会出现
These are only for when you want more complicated behavior out of your game

1100
00:59:20,680 --> 00:59:23,320
不只是物体相互弹跳
than just things bouncing off of each other

1101
00:59:23,320 --> 00:59:26,200
并且彼此相对移动 
and moving relative to one another.

1102
00:59:26,200 --> 00:59:29,620
那么 这有意义吗？
So does that make sense?

1103
00:59:29,620 --> 00:59:32,020
因此 我们将看看这是如何实际工作的 
So we'll see how this actually works.

1104
00:59:32,020 --> 00:59:34,390
我们将继续进行 并开放Level doLua 
We're going to go ahead and open up level dot Lua.

1105
00:59:34,390 --> 00:59:37,090
因此Level..Lua是一个容器类 
So level dot Lua is a container class that

1106
00:59:37,090 --> 00:59:40,120
基本上有我们的游戏水平 包括
basically has our game level in it, including

1107
00:59:40,120 --> 00:59:42,430
世界和所有实体 
the world and all the entities.

1108
00:59:42,430 --> 00:59:47,391
我们更新它 并能够有效地建模 
And we update it and are able to model, effectively,

1109
00:59:47,391 --> 00:59:48,640
就像《愤怒的小鸟》中的关卡 
like a level from Angry Birds.

1110
00:59:48,640 --> 00:59:50,080
事实就是如此 
That's really what it is.

1111
00:59:50,080 --> 00:59:51,220
它有一个世界 
It has a world.

1112
00:59:51,220 --> 00:59:55,720
所以水平线有自己的世界 有300正Y重力 就像我们之前看到的 
So the level has its own world with 300 positive Y gravity, as we saw before.

1113
00:59:55,720 --> 00:59:58,630
它有一张桌子 叫做被毁的身体 
It has a table called destroyed bodies.

1114
00:59:58,630 --> 01:00:01,160
我们稍后会看到这一点 
And we'll see that in a second.

1115
01:00:01,160 --> 01:00:02,710
然后这里我们有四个函数 
And then here we have four functions.

1116
01:00:02,710 --> 01:00:06,730
从第22行开始 我们有了Begin Contact 这是一个长函数 
Starting on line 22, we have begin contact, which is a long function.

1117
01:00:06,730 --> 01:00:09,510
然后我们有结束接触 预解和后解 
And then we have end contact, presolve, and postsolve.

1118
01:00:09,510 --> 01:00:11,590
这四个回调函数是我
Those are the four callback functions that I

1119
01:00:11,590 --> 01:00:14,659
几秒钟前才提到 
alluded to just a few seconds ago.

1120
01:00:14,659 --> 01:00:16,450
他们接受的签名略有不同 
They take in slightly different signatures.

1121
01:00:16,450 --> 01:00:19,150
前三个分别是A、B和碰撞 
The first three take A, B, and collision.

1122
01:00:19,150 --> 01:00:23,260
然后最后一个是A B 碰撞 然后是正常的冲量
And then the last one takes in A, B, collision, and then a normal impulse

1123
01:00:23,260 --> 01:00:26,680
和切线冲量 这是它需要按顺序施加的力
and a tangent impulse, which are the forces that it needed to apply in order

1124
01:00:26,680 --> 01:00:29,620
将这两个物体分开 
to push apart the two objects.

1125
01:00:29,620 --> 01:00:31,840
就像我说的 我们不会使用这三个函数 
Like I said, we won't be using these three functions.

1126
01:00:31,840 --> 01:00:36,550
但在某些情况下 您可能需要使用这些函数 
But there might be a situation where you need to use those functions.

1127
01:00:36,550 --> 01:00:40,330
也许你想要结束接触 因为在你的游戏中 两个物体连接在一起
Maybe you want end contact because, in your game, two objects attached

1128
01:00:40,330 --> 01:00:43,640
当它们相互碰撞时 也许它们是有磁性的或什么的 
to one another, when they collide maybe they're magnetic or something,

1129
01:00:43,640 --> 01:00:46,550
然后 一旦它们分开 也许你想要粒子效果
and then once they pull apart maybe you want a particle effect

1130
01:00:46,550 --> 01:00:50,690
或者是什么来表明他们已经分居了什么的 
or something to show that they've separated or something.

1131
01:00:50,690 --> 01:00:52,310
然后进行预解算和后解算 
And then presolve and postsolve.

1132
01:00:52,310 --> 01:00:54,980
PResolve 我现在想不出一个用例 
Presolve, offhand I can't think of a use case,

1133
01:00:54,980 --> 01:00:59,360
但后期解算可能有用 取决于您的游戏 
but postsolve could be useful for, depending on your game,

1134
01:00:59,360 --> 01:01:03,552
你是不是只需要计算出
whether you need to just figure out maybe the amount of force

1135
01:01:03,552 --> 01:01:04,760
他们需要分开 
that they needed to separate.

1136
01:01:04,760 --> 01:01:11,540
也许你把它乘以某个数量 就会产生某种戏剧性的效果 
Maybe you multiply that by some amount and cause some sort of dramatic effect.

1137
01:01:11,540 --> 01:01:14,120
这些最终取决于您的游戏领域 
Those are ultimately dependent on the domain of your game.

1138
01:01:14,120 --> 01:01:16,120
我们今天要使用的重要功能
The important function that we'll be using today

1139
01:01:16,120 --> 01:01:18,830
是第一个 开始联系 
is the first one, begin contact.

1140
01:01:18,830 --> 01:01:21,050
注意 我们已经定义了这四个函数 
And notice, that we've defined these four functions,

1141
01:01:21,050 --> 01:01:23,460
即使这三个只是空的 
even if these three are just empty.

1142
01:01:23,460 --> 01:01:27,080
但就像我之前说过的那样 我们通过了SET回调
But we pass in, as I said before, the set callbacks

1143
01:01:27,080 --> 01:01:29,510
函数包含这四个函数 
function takes in those four functions.

1144
01:01:29,510 --> 01:01:33,410
注意另一件有趣的事情 因为Lua的动态性质 Line
And notice another interesting thing, because of Lua's dynamic nature, line

1145
01:01:33,410 --> 01:01:35,330
11您可以看到我们有Level init 它
11 you can see that we have level init, which

1146
01:01:35,330 --> 01:01:37,820
是我们的Level类的构造函数 
is the constructor for our level class.

1147
01:01:37,820 --> 01:01:41,060
在构造函数中 我们定义了更多函数 
Within the constructor we are defining more functions.

1148
01:01:41,060 --> 01:01:45,020
您可以根据需要定义任意多层的函数 
You can define functions as many layers deep as you want to.

1149
01:01:45,020 --> 01:01:47,690
您甚至可以从函数返回函数 这
And you can even return functions from functions, which

1150
01:01:47,690 --> 01:01:50,959
被称为高阶函数 
are called higher order functions.

1151
01:01:50,959 --> 01:01:52,250
真的想做什么就做什么 
Really do whatever you want to.

1152
01:01:52,250 --> 01:01:55,730
在本例中 我们只是在内部定义冲突回调
In this case we're just defining the collision callbacks here inside

1153
01:01:55,730 --> 01:01:56,321
我们的初始版本 
of our init.

1154
01:01:56,321 --> 01:01:58,320
但你可以把最多的放在你想放的任何地方 
But you could put the most anywhere you want to.

1155
01:01:58,320 --> 01:02:01,370
你可以在课外使用 你可以在任何你想要的地方使用 
You can have them outside of the class, you can have them wherever you want.

1156
01:02:01,370 --> 01:02:03,828
您可以在您的主点Lua中将它们作为全局函数 
You can have them be global functions in your main dot Lua,

1157
01:02:03,828 --> 01:02:05,660
我不知道我对此有何感想 
which I don't know how I feel about that.

1158
01:02:05,660 --> 01:02:08,930
但只要这些功能存在 您就可以做任何您想做的事情
But you can do whatever you want to as long as the functions exist

1159
01:02:08,930 --> 01:02:11,180
你可以引用他们的符号 你可以传递他们
and you can reference their symbols, you can pass them

1160
01:02:11,180 --> 01:02:14,540
进入自己的点世界 设置回调 
into self dot world set callbacks.

1161
01:02:14,540 --> 01:02:19,490
现在 每当碰撞发生在世界周期 
And now, whenever a collision happens in the world period,

1162
01:02:19,490 --> 01:02:22,640
它会调用这四个函数
it's going to call all four of those functions

1163
01:02:22,640 --> 01:02:26,040
在每次碰撞的每个阶段 
at each stage of each collision.

1164
01:02:26,040 --> 01:02:29,960
所以你可以看到 
So you could see that potentially getting a little bit

1165
01:02:29,960 --> 01:02:33,810
如果你用你所有的逻辑来衡量的话 
hairy if you were to scale high enough with all of your logic.

1166
01:02:33,810 --> 01:02:36,100
如果你有一百万行代码在每一个
If you had a million lines of code in each of these

1167
01:02:36,100 --> 01:02:38,796
每次碰撞它要执行百万行代码 
and its executing million lines of code per collision,

1168
01:02:38,796 --> 01:02:39,920
你可能会遇到麻烦
you could run into trouble.

1169
01:02:39,920 --> 01:02:43,910
但幸运的是 我们不会去接近它 
But, fortunately, we're not going anywhere near that.

1170
01:02:43,910 --> 01:02:49,100
开始接触的要点 所以它接受了A B和碰撞 
The gist of begin contact, so it takes in an A and a B and a collision.

1171
01:02:49,100 --> 01:02:53,100
我们不用碰撞本身 我们只用A和B
We don't end up using the collision itself, we just use the A and the B

1172
01:02:53,100 --> 01:02:56,060
因为这就是我们游戏世界所需要的 
because that's all we need for our game world.

1173
01:02:56,060 --> 01:02:58,868
A和B是什么？
The A and the B are what?

1174
01:02:58,868 --> 01:03:00,368
我们知道A和B是什么吗？
Do we know what the A and the B are?

1175
01:03:00,368 --> 01:03:02,000
观众：可能是两个物体[听不见] 
AUDIENCE: Probably the two objects [INAUDIBLE]..

1176
01:03:02,000 --> 01:03:02,810
科尔顿·奥格登：这两个物体 
COLTON OGDEN: The two objects.

1177
01:03:02,810 --> 01:03:04,685
你知道是尸体还是固定物吗？
Do you know whether it's a body or a fixture?

1178
01:03:08,749 --> 01:03:10,040
观众：这将是固定装置 
AUDIENCE: It would the fixture.

1179
01:03:10,040 --> 01:03:11,623
科尔顿·奥格登：这将是一个固定装置 
COLTON OGDEN: It would be the fixture.

1180
01:03:11,623 --> 01:03:14,640
是固定装置相互碰撞 而不是身体 
The fixtures collide with each other, not the bodies.

1181
01:03:14,640 --> 01:03:18,420
所以当你有一个实体时 回忆一下夹具将形状附加到实体上 
So when you have a body, recall that the fixture attaches the shape to a body.

1182
01:03:18,420 --> 01:03:22,830
物体只是一个位置和速度的容器 
The body is just a position and velocity container for a bunch of fixtures,

1183
01:03:22,830 --> 01:03:24,150
身体是 
the body is.

1184
01:03:24,150 --> 01:03:27,810
每一个固定装置都会与其他东西发生碰撞 
Each individual fixture collides with other things,

1185
01:03:27,810 --> 01:03:30,150
你游戏世界里的其他装置
other fixtures in your game world.

1186
01:03:30,150 --> 01:03:33,700
所以 回想一下 在我们有固定装置之前 
And so, recall that before we had fixture

1187
01:03:33,700 --> 01:03:36,480
设置用户数据 因为这就是我们最终
set user data because that's what we ended up

1188
01:03:36,480 --> 01:03:39,720
我们需要有碰撞的数据 
needing to have data on when we do the collisions.

1189
01:03:39,720 --> 01:03:43,650
我们通过获取用户数据来检查
We check to see via get user data what something is

1190
01:03:43,650 --> 01:03:46,230
或者我们给那个装置的元数据 
or what metadata we've given to that fixture.

1191
01:03:46,230 --> 01:03:51,690
然后我们就可以用这种方法来区分不同类别的对象 
And then we can then separate different classes of objects this way.

1192
01:03:51,690 --> 01:03:55,630
我们可以说 哦 这个物体是外星人 或者这个物体是一个障碍物 
We can say, oh, this object was an alien, or this object was an obstacle,

1193
01:03:55,630 --> 01:03:56,880
或者这个物体是地面
or this object was the ground.

1194
01:03:56,880 --> 01:03:59,129
然后我们可以说 哦 我们是不是撞上了外星人？
And then we can say, oh, did we collide with an alien?

1195
01:03:59,129 --> 01:04:01,830
是外星人与地面的碰撞？
Was the collision between an alien and the ground?

1196
01:04:01,830 --> 01:04:04,620
如果是的话 好吧 让我们播放一个弹跳的声音效果 
If it was, OK, let's play a bounce sound effect.

1197
01:04:04,620 --> 01:04:07,230
如果是一个外星人和另一个外星人 
And if it was between an alien and the other alien, the player

1198
01:04:07,230 --> 01:04:10,170
和另一个外星人 而且速度足够快 
and the other alien, and the velocity was fast enough,

1199
01:04:10,170 --> 01:04:11,820
好吧 外星人应该去死 
OK, the alien should die.

1200
01:04:11,820 --> 01:04:12,420
对吗？
Right?

1201
01:04:12,420 --> 01:04:15,810
我们可以做武断的事情 
We can do arbitrary things.

1202
01:04:15,810 --> 01:04:19,320
所以我在这里编程的方式是 我们
And so the way that I've programmed it here such that we

1203
01:04:19,320 --> 01:04:21,870
可以看到是什么两个东西相互作用 
can see what two things interacted with each other,

1204
01:04:21,870 --> 01:04:26,280
这是对用户数据的一个非常简单的使用 
and this is a very simple use of user data.

1205
01:04:26,280 --> 01:04:31,020
我们在这个代码库中所做的只是将字符串分配给装备 
All we we're doing in this code base is just assigning strings to fixtures,

1206
01:04:31,020 --> 01:04:34,770
但是您可以将表分配给具有任意数据量的装置
but you could assign tables to fixtures with arbitrary amounts of data

1207
01:04:34,770 --> 01:04:36,780
做各种各样的事情 
and do all sorts of things.

1208
01:04:36,780 --> 01:04:39,120
在本例中 我们只使用字符串 
In this case, we're only using strings.

1209
01:04:39,120 --> 01:04:42,960
所以我创建了一张桌子 一张空桌子 然后我就
So I create a table, an empty table, and then I just

1210
01:04:42,960 --> 01:04:47,490
在表中 在该字符串处赋值为真 
assign at table, at that string, true.

1211
01:04:47,490 --> 01:04:49,360
然后我就可以查询那个表了 
And then I can just query that table.

1212
01:04:49,360 --> 01:04:52,200
我有关键球员和关键外星人吗？
Do I have a key player and a key alien?

1213
01:04:52,200 --> 01:04:56,324
我有一个关键障碍和一个关键障碍吗？
Do I have a key obstacle and a key obstacle?

1214
01:04:56,324 --> 01:04:58,740
这就是您可以计算出您的两个对象是什么的方法 
This is how you can figure out what your two objects were.

1215
01:04:58,740 --> 01:05:02,242
因为A可能是一个球员 而B可能是一个障碍 
Because A could be a player and B can be an obstacle.

1216
01:05:02,242 --> 01:05:04,200
A可以是障碍 B可以是球员 
A can be an obstacle and B could be the player.

1217
01:05:04,200 --> 01:05:08,050
所以你必须把这两点都考虑进去 
So you have to take both of that into consideration.

1218
01:05:08,050 --> 01:05:12,990
所以它允许我们这样做 如果类型障碍和类型球员 所以
So it allows us to do if types obstacle and types player, so

1219
01:05:12,990 --> 01:05:20,370
球员与障碍物的碰撞 如果速度足够快 那么我们
a collision between the player and an obstacle, if it's fast enough, then we

1220
01:05:20,370 --> 01:05:22,750
可以摧毁障碍物 
can destroy the obstacle.

1221
01:05:22,750 --> 01:05:23,880
这就是我们在这里做的事情 
This is what we do here.

1222
01:05:23,880 --> 01:05:29,760
所以我取X和Y轴上速度的绝对值 
So I take the absolute value of the velocity on the X and Y.

1223
01:05:29,760 --> 01:05:33,790
所以我计算 X Y 得到物体的线速度 
So I do vel X vel Y gets the body's linear velocity.

1224
01:05:33,790 --> 01:05:37,220
所以线速度就是它在世界上移动的地方 
So linear velocity is just where it's moving in the world.

1225
01:05:37,220 --> 01:05:42,360
它返回两个值 因为速度有X和Y分量 
And it returns two values because velocity has an X and Y component.

1226
01:05:42,360 --> 01:05:48,810
然后我们在这里求和 取两部分的绝对值
And then we sum it here by taking its absolute value of both parts

1227
01:05:48,810 --> 01:05:50,230
然后把它们加在一起 
and adding it together.

1228
01:05:50,230 --> 01:05:54,450
因此 如果它在x轴上移动得很快 但在y轴上移动得不快 
So if it's moving fast on the x-axis, but not fast on the y-axis,

1229
01:05:54,450 --> 01:05:57,420
或者如果它在两个方向上都没有快速移动 或者如果它在两个方向上都快速移动 
or if it's not moving fast on either, or if it's moving fast on both,

1230
01:05:57,420 --> 01:06:02,220
一般来说 我们有一个感觉 物体的平均速度是多少 
we have a sense, in general, what's the average velocity of our object.

1231
01:06:02,220 --> 01:06:04,620
如果它在任一轴上快速移动 我们
If it's moving fast on any of the axes, we

1232
01:06:04,620 --> 01:06:08,580
可以假设这是足够的力来导致物体
can assume that that's sufficient force to cause an object

1233
01:06:08,580 --> 01:06:10,500
会被毁掉 对吧？
to get destroyed, right?

1234
01:06:10,500 --> 01:06:14,250
如果速度大于20 我们就会这样做 这是一个任意值
So we do if the velocity is greater than 20, just an arbitrary value

1235
01:06:14,250 --> 01:06:16,680
我想出的那个似乎是合适的 
that I came up with that seemed appropriate,

1236
01:06:16,680 --> 01:06:19,370
然后我们就要这么做了 
then we're going to do this.

1237
01:06:19,370 --> 01:06:24,280
桌子圆点插入自我圆点毁灭的身体 这是我们之前看到的 
Table dot insert self dot destroyed bodies, which we saw earlier.

1238
01:06:24,280 --> 01:06:25,860
然后是障碍物的身体 
And then the obstacles body.

1239
01:06:25,860 --> 01:06:30,030
现在 为什么我们在这里插入该值为
Now, why are we inserting that value here as

1240
01:06:30,030 --> 01:06:33,968
反对 也许只是在这个函数中销毁它？
opposed to, maybe just destroying it inside this function?

1241
01:06:38,155 --> 01:06:39,530
观众：破坏灯具 
AUDIENCE: Destroying the fixture.

1242
01:06:39,530 --> 01:06:41,080
科尔顿·奥格登：毁灭肉体 
COLTON OGDEN: Destroying the body.

1243
01:06:41,080 --> 01:06:43,490
固定装置 是的 在这种情况下 
The fixture, yeah, in this case.

1244
01:06:43,490 --> 01:06:45,110
观众：对不起 我是说这场比赛 
AUDIENCE: I mean the fixture, sorry.

1245
01:06:45,110 --> 01:06:47,360
因为您稍后仍会在代码中引用它 
Because you're still referencing it later in the code.

1246
01:06:47,360 --> 01:06:49,735
Colton Ogden：您在代码的后面仍在引用 
COLTON OGDEN: You're still referencing later in the code.

1247
01:06:49,735 --> 01:06:52,070
Box2D维护对所有Body、All
Box2D maintains a reference to all of the bodies, all

1248
01:06:52,070 --> 01:06:58,820
你的世界中的固定装置 而不管
of the fixtures in your world, regardless of

1249
01:06:58,820 --> 01:07:00,440
不管你有没有删除它们 
whether you've deleted them or not.

1250
01:07:00,440 --> 01:07:03,470
但是如果你在它正在运行的时候把它们删除 
But if you delete them while it's in the middle of a,

1251
01:07:03,470 --> 01:07:06,950
就像检查冲突一样 它会尝试进行另一次冲突
like checking for collision, it'll try to do another collision

1252
01:07:06,950 --> 01:07:12,100
使用被销毁的主体 您将得到崩溃或堆栈溢出错误 
with that destroyed body and you'll get a crash or a stack overflow error.

1253
01:07:12,100 --> 01:07:14,300
我发现这两件事我都经历过 
I found I experienced both of those.

1254
01:07:14,300 --> 01:07:19,940
你不会想要在碰撞中删除或销毁任何东西
You don't want to ever delete or destroy anything while inside a collision

1255
01:07:19,940 --> 01:07:21,260
回拨你的世界 
callback for your world.

1256
01:07:21,260 --> 01:07:24,192
它会导致可怕的事情发生 
It will cause horrible things to happen.

1257
01:07:24,192 --> 01:07:26,900
所以我们所做的就是保持对我们所做的一切的引用
So what we do is we maintain a reference to everything that we're

1258
01:07:26,900 --> 01:07:29,480
只要把它插进去就会毁了它 
going to destroy by just inserting it.

1259
01:07:29,480 --> 01:07:37,220
所以如果我们把我们想要的任何东西的身体放进被销毁的身体里 
So if we do table dot insert the body of whatever we want into destroyed bodies,

1260
01:07:37,220 --> 01:07:40,250
然后 我们可以在世界更新后对其进行循环 
we can then loop over that after the world updates.

1261
01:07:40,250 --> 01:07:45,750
然后在更新函数之外逐个销毁它们 
And then just destroy them one by one outside of the update function.

1262
01:07:45,750 --> 01:07:49,760
我们通过身体而不是固定装置的原因
And the reason that we are passing in the body and not the fixture

1263
01:07:49,760 --> 01:07:55,430
当我们摧毁一具身体时 它就摧毁了所有的固定装置
is when we destroy a body, it destroys all the fixtures

1264
01:07:55,430 --> 01:07:57,451
也与那具身体有关 
associated with that body as well.

1265
01:07:57,451 --> 01:07:59,700
所以我们只是在摧毁这里的顶层集装箱 
So we're just destroying the top level container here.

1266
01:07:59,700 --> 01:08:04,970
在这种情况下 我们是销毁一个固定装置还是销毁一个身体并不重要
In this case, it doesn't matter too much whether we destroy a fixture or a body

1267
01:08:04,970 --> 01:08:09,090
因为这是一对一的关系 
because it's a one to one relationship.

1268
01:08:09,090 --> 01:08:14,012
但如果你有 比方说 一个身体上有五个固定物 
But if you had, let's say, a body that has five fixtures on it.

1269
01:08:14,012 --> 01:08:16,220
如果这整个东西和别的东西相撞
And if that entire thing collides with something else

1270
01:08:16,220 --> 01:08:18,080
你想毁掉这一切
and you want to destroy that entire thing,

1271
01:08:18,080 --> 01:08:20,479
你想毁掉的是尸体而不是一个人
you want to destroy the body, not an individual fixture.

1272
01:08:20,479 --> 01:08:24,410
因为当你摧毁尸体的时候 它摧毁了所有的固定装置 而不仅仅是
Because when you destroy the body, it destroys all the fixtures, not just

1273
01:08:24,410 --> 01:08:25,760
唯一的固定装置 
the one fixture.

1274
01:08:25,760 --> 01:08:29,990
所以我们删除了尸体 把尸体加到被摧毁的尸体上 
So that's we're deleting the body, adding the body to destroyed bodies,

1275
01:08:29,990 --> 01:08:34,189
然后再删除
and then later performing a delete off of that.

1276
01:08:34,189 --> 01:08:39,740
函数在这里被销毁 
The function is destroy here.

1277
01:08:39,740 --> 01:08:42,350
所以在157行--
So on line 157--

1278
01:08:42,350 --> 01:08:45,859
从155到159 这就是我们
well, 155 to 159, this is where we actually

1279
01:08:45,859 --> 01:08:48,310
把所有我们想标记的东西都盖上 
iterate over everything that we wanted to flag,

1280
01:08:48,310 --> 01:08:51,560
或者我们标记为已销毁的 然后销毁
or that we've flagged as destroyed, and we destroy it.

1281
01:08:51,560 --> 01:08:55,910
如果身体没有被摧毁 那就摧毁它 
So if not body is destroyed, destroy it.

1282
01:08:55,910 --> 01:09:01,790
一旦我们摧毁了它 我们就到这里 
And then once we destroy it, we're going to go down here and end up

1283
01:09:01,790 --> 01:09:05,420
实际上消除了障碍和外星人阶级
actually removing the obstacle and the alien class

1284
01:09:05,420 --> 01:09:09,410
从我们的外星人和障碍物列表中删除
from our list of aliens and obstacles.

1285
01:09:09,410 --> 01:09:12,479
因为它保持了我们所画的
Because that maintains a reference to what we're drawing

1286
01:09:12,479 --> 01:09:13,979
我们也想删除它
and we want to also delete that.

1287
01:09:13,979 --> 01:09:17,450
所以我们不仅想从世界上删除这个物体 
So not only do we want to delete the object from the world,

1288
01:09:17,450 --> 01:09:19,970
我们要删除我们创建的对象
we want to delete the objects that we've created

1289
01:09:19,970 --> 01:09:23,090
用来包装尸体和固定装置
that are a wrapper for the bodies and fixtures

1290
01:09:23,090 --> 01:09:26,540
还有外星人的画像 这样它就不会再被吸引到这个场景 
and also the drawing of our aliens so it no longer gets drawn to the scene,

1291
01:09:26,540 --> 01:09:27,388
基本上
basically.

1292
01:09:30,020 --> 01:09:36,410
所以 永远不要删除回调函数中的body或fixture 
So yeah, don't ever delete a body or a fixture inside your callbacks.

1293
01:09:36,410 --> 01:09:39,109
总是标记它们 然后删除它们 
Always flag them and delete them afterwards.

1294
01:09:39,109 --> 01:09:43,700
基本上 不要在世界更新功能的中间删除
Basically, don't delete in the middle of a world update function

1295
01:09:43,700 --> 01:09:45,410
这就是我们在这里看到的 
call, which we see here.

1296
01:09:45,410 --> 01:09:49,550
请注意 这发生在152 正在进行自我世界更新 
Notice that this takes place, 152, were doing self world update.

1297
01:09:49,550 --> 01:09:55,850
然后在155到159 我们通过碰撞填充了被摧毁的身体 
And then on 155 to 159, we've populated destroyed bodies via the collision

1298
01:09:55,850 --> 01:09:57,780
我们在上面定义的回调 
callback that we defined up above.

1299
01:09:57,780 --> 01:10:00,650
在这里 我们可以摧毁一切 
So in here, this is where we can actually destroy everything.

1300
01:10:00,650 --> 01:10:04,920
这是更新功能之外的 这里是世界更新功能 
This is outside of the update function, here, the world update function.

1301
01:10:04,920 --> 01:10:08,210
我们不需要担心堆栈溢出或segfault 
We don't need to worry about stack overflow or a segfault, which

1302
01:10:08,210 --> 01:10:13,070
我们可以删除中间的内容
we get by deleting something while it's in the middle

1303
01:10:13,070 --> 01:10:16,280
来处理碰撞 
of processing its collisions.

1304
01:10:16,280 --> 01:10:17,390
不幸的bug
So unfortunate bug.

1305
01:10:17,390 --> 01:10:21,620
如果您发现自己遇到了堆栈溢出或段错误
If you ever find yourself running into stack overflows or segfaults

1306
01:10:21,620 --> 01:10:25,680
在冲突回调中 请确保没有删除任何内容 
in your collision callbacks, make sure you're not deleting anything.

1307
01:10:25,680 --> 01:10:28,430
但我们可以在这里看到 它非常相似 行为
But we can see here, it's very similar, the behavior

1308
01:10:28,430 --> 01:10:32,960
我们定义了障碍和玩家之间 障碍和外星人之间 
we defined between obstacles and the player, between obstacles and aliens,

1309
01:10:32,960 --> 01:10:34,940
以及玩家和外星人之间的关系 
and between the player and alien.

1310
01:10:34,940 --> 01:10:38,480
最终 它要检查的是它的平均速度
Ultimately, it's check to see whether the average of its velocity

1311
01:10:38,480 --> 01:10:41,000
大于某个数字 在本例中为20 
is greater than a certain number, in this case, 20.

1312
01:10:41,000 --> 01:10:44,627
如果是 则将其标记为已销毁 
And if it is, flag it as destroyed.

1313
01:10:44,627 --> 01:10:46,460
因此 如果玩家击中外星人 摧毁它 
So if the player hits the alien, destroy it.

1314
01:10:46,460 --> 01:10:48,560
如果障碍物击中外星人 摧毁它 
If a obstacle hits the alien, destroy it.

1315
01:10:48,560 --> 01:10:51,230
这与《愤怒的小鸟》中的工作原理相似 
And it's similar to how it works in Angry Birds.

1316
01:10:51,230 --> 01:10:57,020
当你在《愤怒的小鸟》中向建筑物扔东西和一块碎片时
When you throw something at a structure in Angry Birds and a piece of debris

1317
01:10:57,020 --> 01:11:00,740
从它上掉下来撞到猪 通常也会杀死猪 
falls off of it and hits the pig, usually kills the pig too.

1318
01:11:00,740 --> 01:11:04,331
如果你的鸟撞上了猪 通常会杀死猪 
And if your bird hits the pig, that usually kills the pig.

1319
01:11:04,331 --> 01:11:06,830
但如果你移动得不够快 或者如果一块碎片
But if you're not moving fast enough or if a piece of debris

1320
01:11:06,830 --> 01:11:09,530
移动得还不够快 它只会轻推猪 
isn't moving fast enough, it'll just nudge the pig,

1321
01:11:09,530 --> 01:11:11,000
它实际上不会杀死那头猪 
it won't actually kill the pig.

1322
01:11:11,000 --> 01:11:13,820
这就是为什么我们要把所有这些都考虑进去 
So that's why we're taking all of this into consideration.

1323
01:11:13,820 --> 01:11:18,780
我们不仅仅是在代码中盲目删除身体的内容 
We're not just doing a blind delete off of the body's in our code,

1324
01:11:18,780 --> 01:11:22,540
我们实际上是在确定 它的移动速度是否也足够快 即
we're actually making sure, is it also moving fast enough, i.e.

1325
01:11:22,540 --> 01:11:24,170
它有足够的力量吗？
does it have enough force?

1326
01:11:24,170 --> 01:11:28,890
如果是 则执行代码 然后执行删除或标记
And if it does, then perform the code, then perform the deletion or flag it

1327
01:11:28,890 --> 01:11:30,210
已被删除 
as being deleted.

1328
01:11:30,210 --> 01:11:33,110
因此 这就是为什么用户数据很重要的原因 
And so once again, that's why user data is important.

1329
01:11:33,110 --> 01:11:37,920
因为这就是我们能够--因为在回调中注意到
Because that's how we're able to-- because notice in the callback

1330
01:11:37,920 --> 01:11:41,820
我们只得到了A和B 而这些将永远是固定的 
we just get an A and a B. And those are always going to be fixtures.

1331
01:11:41,820 --> 01:11:44,520
固定装置 以便它知道是哪种固定装置
Fixtures, in order for it to know what kind of a fixture

1332
01:11:44,520 --> 01:11:48,000
它是 无论它属于玩家还是外星人 
it is, whether it belongs to a player or an alien,

1333
01:11:48,000 --> 01:11:50,010
我们需要给它一些信息 
we need to give it some information.

1334
01:11:50,010 --> 01:11:55,090
因此 设置的用户数据将装置标记为特定类型 
So the set user data flags the fixtures as being of a specific type.

1335
01:11:55,090 --> 01:11:58,170
然后我们可以使用Get User Data在这里获取它
And then we can fetch it here with get user data

1336
01:11:58,170 --> 01:12:02,490
然后实际执行相关的博弈逻辑 
and then actually perform the relevant game logic.

1337
01:12:02,490 --> 01:12:05,424
对于这是如何工作的 有什么问题吗？
Any questions as to how this works?

1338
01:12:05,424 --> 01:12:11,412
观众：你是在检查两个障碍物是否相撞吗？
AUDIENCE: Are you checking for if two obstacles knock into each other?

1339
01:12:11,412 --> 01:12:14,370
科尔顿·奥格登：我是在检查两个相互碰撞的障碍物吗？
COLTON OGDEN: Am I checking with two obstacles collide with each other?

1340
01:12:14,370 --> 01:12:15,570
我可能不是 
I might not be.

1341
01:12:15,570 --> 01:12:18,720
如果是那样的话--你应该这样做 
In that case-- you should.

1342
01:12:18,720 --> 01:12:21,930
在这种情况下 既然我们不是 他们就会撞在一起 
In that case, since we're not, they'll just bump into each other.

1343
01:12:21,930 --> 01:12:24,780
但是 是的 如果我们想要两个木制障碍
But, yeah, if we wanted two wooden obstacles

1344
01:12:24,780 --> 01:12:27,240
如果他们打得足够快的话就会互相摧毁 
to destroy each other if they hit fast enough,

1345
01:12:27,240 --> 01:12:29,340
你在这里也会做同样的事情 
you would just do the same thing here.

1346
01:12:29,340 --> 01:12:32,850
如果类型有障碍 我想 
If types obstacle, I guess.

1347
01:12:32,850 --> 01:12:35,490
但在这种情况下 因为它们都是同一把钥匙 
But in this case, because they're both the same key,

1348
01:12:35,490 --> 01:12:39,342
你必须做的是 如果类型--
you would have to do if types--

1349
01:12:39,342 --> 01:12:40,800
让我们看看我们怎么再做一次 
let's see how we're doing it again.

1350
01:12:40,800 --> 01:12:45,310
所以类型障碍是真的 类型障碍是真的 
So types obstacles is true, types obstacles is true.

1351
01:12:45,310 --> 01:12:50,740
你会说如果类型障碍而不是外星人类型 不是类型玩家 不是--
You would say if types obstacle and not types alien, not types player, not--

1352
01:12:50,740 --> 01:12:52,300
有一种更干净的方法来做这件事 
there's a cleaner way to do it.

1353
01:12:52,300 --> 01:12:54,390
观众：就像一系列的[INAUDIBLE]声明 
AUDIENCE: Like a series of [INAUDIBLE] statements.

1354
01:12:54,390 --> 01:12:54,630
科尔顿·奥格登：是的 
COLTON OGDEN: Yeah.

1355
01:12:54,630 --> 01:12:55,800
观众：[听不见]陈述 
AUDIENCE: [INAUDIBLE] statements.

1356
01:12:55,800 --> 01:12:56,591
科尔顿·奥格登：是的 
COLTON OGDEN: Yeah.

1357
01:12:56,591 --> 01:12:57,330
那是真的 
That's true.

1358
01:12:57,330 --> 01:12:59,680
是啊 有很多种方法 
Yeah, there's a lot of ways.

1359
01:12:59,680 --> 01:13:02,702
如果我要重新设计这个 我也会抽象出这个代码
And if I were to re-engineer this, I would also abstract out this code

1360
01:13:02,702 --> 01:13:03,660
并把它变成一个函数 
and make it a function.

1361
01:13:03,660 --> 01:13:07,620
因为这三者之间的代码基本相同 
Because it's pretty much the same code between all three of these.

1362
01:13:07,620 --> 01:13:09,630
但为了说明 为了简单起见
But just to illustrate and just for simplicity

1363
01:13:09,630 --> 01:13:12,080
因为这是非常相似的互动 
because it's pretty similar interactions,

1364
01:13:12,080 --> 01:13:15,420
并没有真正在其中投入太多的工程预见性 
didn't really put too much engineering forethought into it.

1365
01:13:15,420 --> 01:13:20,580
当然 如果您对它进行扩展 我会建议您这样做 
Definitely if you expand upon it, I would recommend doing that.

1366
01:13:20,580 --> 01:13:26,070
但这是让我们的世界表现得不仅仅是解决
But that's the gist of making our world behave beyond just resolving

1367
01:13:26,070 --> 01:13:28,620
碰撞和相互推开障碍物 这
collisions and pushing obstacles away from each other, which

1368
01:13:28,620 --> 01:13:31,690
是默认行为 
is the default behavior.

1369
01:13:31,690 --> 01:13:33,090
所以我们设置了回调 
So we set the callbacks.

1370
01:13:33,090 --> 01:13:33,630
我们很好 
We're good.

1371
01:13:33,630 --> 01:13:36,671
现在 当我们彼此互动时 它们的行为会有所不同 
Now things, when we interact with each other, they'll behave differently,

1372
01:13:36,671 --> 01:13:39,210
它们会引发不同的行为 
they'll trigger different behavior.

1373
01:13:39,210 --> 01:13:42,270
我们有一个叫发射标志的东西 一个外星人发射标志 
We have this thing called a launch marker, an alien launch marker.

1374
01:13:42,270 --> 01:13:43,711
有人知道这可能是什么吗？
Anybody know what that might be?

1375
01:13:47,559 --> 01:13:50,697
观众：这是显示轨迹的小圆点吗？
AUDIENCE: Is that the little dots that show the trajectory?

1376
01:13:50,697 --> 01:13:53,280
科尔顿·奥格登：是的 所以是圆点显示了轨迹 
COLTON OGDEN: Yeah, so it's the dots that show the trajectory.

1377
01:13:53,280 --> 01:13:56,220
这是一个 外星人被渲染在屏幕的左侧
It's one, the alien being rendered on the left side of the screen

1378
01:13:56,220 --> 01:14:00,180
没有任何物理作用 那就是点击和拖动 
without any physics applied to it, that's click and dragable.

1379
01:14:00,180 --> 01:14:02,040
它也会呈现出一个轨迹 
And it also renders a trajectory.

1380
01:14:02,040 --> 01:14:07,050
当你松开鼠标时 它会发射一个真正的Box 2D外星人
And when you release the mouse, it launches an actual Box2D alien

1381
01:14:07,050 --> 01:14:12,630
沿着轨迹所预示的方向移动
traveling in the direction that that trajectory foretells.

1382
01:14:12,630 --> 01:14:19,024
如果我们看这里的外星人发射标记 它基本上保持了一个参考 
If we look at alien launch marker here, it basically maintains a reference to

1383
01:14:19,024 --> 01:14:20,190
不管我们有没有瞄准
whether we're aiming or not.

1384
01:14:20,190 --> 01:14:21,600
所以它有几个州 
So it's got a couple of states.

1385
01:14:21,600 --> 01:14:25,190
它有发射状态和瞄准状态 
It's got a launch state and an aiming state.

1386
01:14:25,190 --> 01:14:27,960
我们最终会找到一个外星人 
An alien that we'll have a reference to eventually, which

1387
01:14:27,960 --> 01:14:30,400
会产生并给它一个动力
will spawn and will give it an impulse.

1388
01:14:30,400 --> 01:14:36,420
所以一个脉冲有效地将它的速度立即设置为某个值 
So an impulse is effectively setting its velocity immediately to some value,

1389
01:14:36,420 --> 01:14:38,160
而不是随着时间的推移 
as opposed to something over time.

1390
01:14:38,160 --> 01:14:40,170
我们可以对物体施力 
We can apply force to an object, which would

1391
01:14:40,170 --> 01:14:43,230
就像你开车撞上了什么东西
be like you driving your car up against something

1392
01:14:43,230 --> 01:14:46,110
然后逐渐加速 这就是施加力
and then gradually accelerating, that's applying force.

1393
01:14:46,110 --> 01:14:49,920
我们也可以通过汽车全速行驶来施加冲力
And we can also apply impulse by going full speed with our car

1394
01:14:49,920 --> 01:14:52,230
撞击一个物体 
and hitting an object, and that will have

1395
01:14:52,230 --> 01:14:56,220
以一定速度施加脉冲的效果 
the effect of applying an impulse at a certain velocity.

1396
01:14:56,220 --> 01:15:00,450
当我们拖着外星人然后把它放了 
When we drag our alien and then we release it,

1397
01:15:00,450 --> 01:15:03,480
我们要在相反的方向施加一个脉冲
we want to apply an impulse in the opposite direction of where we're

1398
01:15:03,480 --> 01:15:06,060
基于一定量的拖动 
dragging based on a certain amount.

1399
01:15:06,060 --> 01:15:10,500
我把它放大了10倍 但你可以让它任意放大 
I scaled it by 10, but you can have it be arbitrary.

1400
01:15:10,500 --> 01:15:14,550
然后弹道模型会显示出它的去向 
And then the trajectory models where it's going.

1401
01:15:14,550 --> 01:15:20,110
轨迹是通过这些线计算出来的 
And the trajectory is calculated via these lines here.

1402
01:15:20,110 --> 01:15:22,250
从第90行到第104行 
So from line 90 to 104.

1403
01:15:22,250 --> 01:15:25,620
在Box 2D集合中有一个公式
There is a formula for, in that Box2D set

1404
01:15:25,620 --> 01:15:27,390
的教程 这实际上告诉你如何
of tutorials, that actually shows you how

1405
01:15:27,390 --> 01:15:31,890
为了计算给定启动脉冲和启动脉冲的估计轨迹 
to calculate an estimated trajectory given a starting impulse and a starting

1406
01:15:31,890 --> 01:15:33,900
位置
position.

1407
01:15:33,900 --> 01:15:36,060
也就是这个公式
Which is this formula here.

1408
01:15:36,060 --> 01:15:38,190
有点复杂
It's semi-complicated.

1409
01:15:38,190 --> 01:15:40,500
这篇文章详细介绍了它是如何工作的 
The article goes into detail as to how it works,

1410
01:15:40,500 --> 01:15:45,420
但它有效地计算了1/60秒 
but it effectively calculates 1/60 of a second,

1411
01:15:45,420 --> 01:15:48,580
假设我们以1/60秒的速度进行模拟 
assuming that we're running our simulation at 1/60 of a second,

1412
01:15:48,580 --> 01:15:52,810
它将在这里进行90次迭代 从1到90 
it will, over 90 iterations here, 1 to 90,

1413
01:15:52,810 --> 01:15:56,310
计算模拟的每一步 
calculate each individual step of that simulation.

1414
01:15:56,310 --> 01:15:58,900
然后我在这里只渲染每5个 
And then I only render every 5 here.

1415
01:15:58,900 --> 01:16:03,180
所以如果i是mod 5s 那么我最终会得到
So if i is mod 5 s 0, then I'll actually end up

1416
01:16:03,180 --> 01:16:05,640
在轨迹X处绘制圆 轨迹
drawing a circle at trajectory X, trajectory

1417
01:16:05,640 --> 01:16:07,830
轨迹X和Y在这里 
Y. Trajectory X and Y being here.

1418
01:16:07,830 --> 01:16:10,950
平移了X 平移了Y作为起始位置 
Shifted X, shifted Y being the starting location.

1419
01:16:10,950 --> 01:16:15,180
然后我们将I乘以1/60秒 这将得到
And then we multiply i by 1/60 of a second, which will give us

1420
01:16:15,180 --> 01:16:19,860
这里是这个脉冲的标量 
the scalar for this impulse here.

1421
01:16:19,860 --> 01:16:23,600
然后在重力的作用下 我们必须做这个 我的平方加
And then with gravity we have to do this i squared plus

1422
01:16:23,600 --> 01:16:31,530
I乘以y轴上重力的1/2乘以1/60的平方 
i times 1/2 times the gravity on the y-axis times 1/60 squared.

1423
01:16:31,530 --> 01:16:34,530
这篇文章更详细地介绍了它的工作原理 
The article goes into a little bit more detail as to how it works.

1424
01:16:34,530 --> 01:16:38,910
但这就是它被转换成源代码的原因 
But that's it converted into source code.

1425
01:16:38,910 --> 01:16:41,010
但这实际上是一种重力模拟
But it's effectively a gravity simulation

1426
01:16:41,010 --> 01:16:44,490
以及随时间变化的速度模拟 
and a velocity simulation over time.

1427
01:16:44,490 --> 01:16:47,670
并通过基于90次迭代来呈现它 这
And by rendering it based on 90 iterations, which

1428
01:16:47,670 --> 01:16:51,210
是1.5秒 也就是1/60秒
is one and a half seconds, at 1/60 of a second

1429
01:16:51,210 --> 01:16:54,750
我们可以准确地预测我们要去哪里 
we can forecast where exactly we're going.

1430
01:16:54,750 --> 01:17:00,620
然后当我们施加这个脉冲 X和Y时 球实际上会移动 
And then when we apply this impulse, X and Y, the ball will actually travel,

1431
01:17:00,620 --> 01:17:04,690
外星人实际上会以那个准确的轨迹朝那个方向移动 
the alien will actually travel in that direction at that exact trajectory.

1432
01:17:09,050 --> 01:17:12,050
这是发射标志的复杂部分 
That's the complicated part of the launch marker.

1433
01:17:12,050 --> 01:17:16,550
另一部分是它有几个州 就像我之前说的那样 
The other part is that it has a couple of states, like I said before.

1434
01:17:16,550 --> 01:17:20,180
因此 当我们点击时 我们没有发射 它应该进入瞄准模式 
So when we click and we're not launched, it should go into aiming mode.

1435
01:17:20,180 --> 01:17:25,790
所以如果我们瞄准了 我们就会设置一个旋转来--
And so if we're aiming then we're going to set a rotation to--

1436
01:17:25,790 --> 01:17:31,610
实际上 轮换并不重要 因为这是在我结束之前
actually, rotation is not relevant because this was before I ended up

1437
01:17:31,610 --> 01:17:34,760
使用预测轨迹方法 
using the predictive trajectory method.

1438
01:17:34,760 --> 01:17:39,470
然而 X和Y处的移动是相关的 因为这是开始
The shift at X and Y though, those are relevant because that's the starting

1439
01:17:39,470 --> 01:17:41,240
你的轨迹的位置 
location for your trajectory.

1440
01:17:41,240 --> 01:17:43,084
这就是你的鼠标所在的位置 
That's wherever your mouse is.

1441
01:17:43,084 --> 01:17:45,500
我们夹住它 这样它就不会超过一定的极限
And we clamp it so that it doesn't go past a certain limit

1442
01:17:45,500 --> 01:17:49,730
在左边或右边 这样它就会留在方框区域内 
on the left or the right, so that it stays within a box area.

1443
01:17:49,730 --> 01:17:52,160
但这将是当你放开鼠标的时候 
But this will be whenever you let go of the mouse, that

1444
01:17:52,160 --> 01:17:55,670
将是我们孕育Box2D外星人并应用
will be where we spawn the Box2D alien and apply

1445
01:17:55,670 --> 01:17:59,460
相对于我们移动鼠标的位置向负方向的冲动 
an impulse in a negative direction relative to where we move the mouse.

1446
01:17:59,460 --> 01:18:01,820
因此 如果我们将鼠标向左向下移动 
So if we move the mouse to the left and down,

1447
01:18:01,820 --> 01:18:05,620
它将用一种上升的冲动来否定这一点
it's going to negate that with an impulse going up

1448
01:18:05,620 --> 01:18:08,330
向右 如果这有意义的话 
and to the right, if that makes sense.

1449
01:18:08,330 --> 01:18:10,378
这就是轨迹所显示的 
And that's what's shown by the trajectory.

1450
01:18:13,130 --> 01:18:15,560
除此之外 它还呈现了不同的东西
And then, aside from that, it renders different things

1451
01:18:15,560 --> 01:18:16,827
取决于是否--
depending on whether or not--

1452
01:18:16,827 --> 01:18:17,660
我们现在处于什么状态 
what state we're in.

1453
01:18:17,660 --> 01:18:20,600
因此 如果我们没有发射 它将只渲染外星人 
So if we haven't launched, it will render just the alien.

1454
01:18:20,600 --> 01:18:23,660
如果我们处于瞄准模式 那么它实际上应该渲染并计算
If we're in aiming mode then it should actually render and calculate

1455
01:18:23,660 --> 01:18:24,710
弹道 
the trajectory.

1456
01:18:24,710 --> 01:18:27,080
否则 它只会渲染外星人 
Otherwise, it would just render the alien.

1457
01:18:27,080 --> 01:18:34,130
所以一旦我们释放了鼠标 我们就释放了1并瞄准了它 
And so once we release the mouse, so was released 1 and were aiming,

1458
01:18:34,130 --> 01:18:35,960
发射是真的 生一个外星人 
launched is true, spawn an alien.

1459
01:18:35,960 --> 01:18:40,610
所以我们创造了一个新的外星人和自我世界 它是圆的 
So we create a new alien with self world, it's round.

1460
01:18:40,610 --> 01:18:43,400
我们从换X换到换Y开始 我们
We started at shifted X and shifted Y. We

1461
01:18:43,400 --> 01:18:48,720
将其线速度设置为我们之前计算的相同值 
set its linear velocity to the same values that we calculated before.

1462
01:18:48,720 --> 01:18:51,960
所以它是基数X减去移位X乘以10 
So it's base X minus shifted X times 10.

1463
01:18:51,960 --> 01:18:53,450
所以 乘以10是一个标量 
So the times 10 is a scalar amount.

1464
01:18:56,450 --> 01:19:03,421
然后 基数X实际上就是我们移动它的地方 
And then the base X is where we've moved it, effectively.

1465
01:19:03,421 --> 01:19:03,920
或者 不是 
Or, no.

1466
01:19:03,920 --> 01:19:07,970
基数X是它开始的地方 移位X是我们移动它的地方 
Base X is where it starts and shifted X is where we've moved it.

1467
01:19:07,970 --> 01:19:11,390
因此 通过从基数减去移位 
And so by subtracting shifted from the base,

1468
01:19:11,390 --> 01:19:16,280
我们得到了我们想要影响冲动的负面方向 
we get the negative direction that we want to effect the impulse.

1469
01:19:16,280 --> 01:19:21,560
然后在这里设置冲量 线速度 
And then the impulse is set here with linear velocity.

1470
01:19:21,560 --> 01:19:26,660
然后我们也将其设置为恢复原状为0.4 
And then we also set it to have a restitution of 0.4.

1471
01:19:26,660 --> 01:19:29,420
回想一下 恢复原状就是反弹 
Recall, restitution is bounciness.

1472
01:19:29,420 --> 01:19:32,450
所以我们的外星人在落地时会反弹一点 
So our alien bounces a little bit when it hits the ground.

1473
01:19:32,450 --> 01:19:37,170
然后有人知道角衰减可能是什么吗？
And then anybody know what angular damping might be?

1474
01:19:37,170 --> 01:19:39,680
有没有人猜到？
Any guesses?

1475
01:19:39,680 --> 01:19:45,860
角阻尼是指当它旋转时 基本上是它旋转时的摩擦力 
Angular damping is when it rotates, basically, friction on its rotation.

1476
01:19:45,860 --> 01:19:49,520
因此 当它在地面上旋转时 它不会无限滚动 
So that when it rotates on the ground, it doesn't roll indefinitely.

1477
01:19:49,520 --> 01:19:52,997
如果我们不设置 它只会永远地滚动 
If we don't set that, it'll just roll forever and ever and ever and ever.

1478
01:19:52,997 --> 01:19:54,080
这不是我们想要的 
Which is not what we want.

1479
01:19:54,080 --> 01:19:56,990
我们希望它在某个时间点停止 因为一旦它停止 
We want it to stop at a certain point because once it stops,

1480
01:19:56,990 --> 01:20:00,170
我们知道 好了 现在我们可以让下一个外星人准备发射了 
we know, OK, now we can get the next alien ready to launch.

1481
01:20:03,170 --> 01:20:05,420
这就是发射标志背后的主旨 
And that's the gist behind the launch marker.

1482
01:20:05,420 --> 01:20:07,294
我们如何呈现轨迹 
How we render trajectory.

1483
01:20:07,294 --> 01:20:10,460
对于这方面的计算 更详细地说 我将探索该URL 
For the math on that, a little bit more in detail, I would explore that URL.

1484
01:20:10,460 --> 01:20:12,740
它深入到了非常好的细节中 
It goes into it into pretty good detail.

1485
01:20:12,740 --> 01:20:18,156
我在这里使用它作为创建这段代码的参考 
I use that as a reference for creating this bit of code here.

1486
01:20:18,156 --> 01:20:20,030
但实际上 它只是在渲染
But yeah, effectively, is it's just rendering

1487
01:20:20,030 --> 01:20:24,470
一堆有这个轨迹的圆 然后计算它
a bunch of circles with that trajectory and calculating it

1488
01:20:24,470 --> 01:20:30,770
超过90个刻度 90帧迭代 
over 90 ticks, 90 frame iterations.

1489
01:20:30,770 --> 01:20:32,860
回到那一层 
Back to the level.

1490
01:20:32,860 --> 01:20:37,402
对不起 关于发射标记的整体工作原理有什么问题吗？
Sorry, any questions overall as to how the launch marker works?

1491
01:20:37,402 --> 01:20:38,334
观众：没有 
AUDIENCE: No.

1492
01:20:38,334 --> 01:20:40,000
科尔顿·奥格登：酷 
COLTON OGDEN: Cool.

1493
01:20:40,000 --> 01:20:40,500
好的 
All right.

1494
01:20:40,500 --> 01:20:44,190
所以我们有一个外星人的桌子 一个障碍物桌子 
So then we have an alien's table, an obstacles table,

1495
01:20:44,190 --> 01:20:47,580
地面的边缘形状 
edge shape for the ground.

1496
01:20:47,580 --> 01:20:50,660
然后我们只需创造一个外星人来摧毁 
And then we just create an alien to destroy.

1497
01:20:50,660 --> 01:20:52,140
在这里制造一些障碍 
Spawn a few obstacles here.

1498
01:20:52,140 --> 01:20:56,280
在这种情况下 有两个垂直障碍物和一个水平障碍物 
So in this case, two vertical obstacles and a horizontal one.

1499
01:20:56,280 --> 01:20:59,580
定位成水平的在垂直的上方
Positioned such that the horizontal one is over the vertical ones

1500
01:20:59,580 --> 01:21:04,730
它们是分开的 所以外星人就在它们中间 
and they're spaced apart such that the aliens are in the middle of them.

1501
01:21:04,730 --> 01:21:08,980
然后这里的地面 我们给地面一些摩擦 0.5 
Then the ground here, we give the ground some friction, 0.5.

1502
01:21:08,980 --> 01:21:12,280
这很大程度上是为了建立我们的水平 
And that's pretty much it for setting up our level.

1503
01:21:12,280 --> 01:21:18,330
所以 如果我们想 在这一点之后 我们有了基础
So if we wanted to, after this point, we have the foundation

1504
01:21:18,330 --> 01:21:24,030
必须使用公认简单的障碍才能真正产生任意级别
necessary to really spawn arbitrary levels with admittedly simple obstacles

1505
01:21:24,030 --> 01:21:24,900
在这点上 
at this point.

1506
01:21:24,900 --> 01:21:26,970
但我们可以设定--
But we could set--

1507
01:21:26,970 --> 01:21:30,270
因为我们在这里所做的只是简单地插入我们的外星人
because all we're doing here is just simple insertions to our aliens

1508
01:21:30,270 --> 01:21:36,030
和障碍物桌 我们可以创建几乎任何关卡 也许
and obstacles table, we could create pretty much any level just by, maybe

1509
01:21:36,030 --> 01:21:40,710
在数据中 指定级别可能类似于表
in data, specifying level could be like a table

1510
01:21:40,710 --> 01:21:44,220
然后外星人可能会成为另一张桌子 
and then aliens could be another table.

1511
01:21:44,220 --> 01:21:53,100
然后可能只是X等于某个值 
And then maybe all it is just a like X equals some value,

1512
01:21:53,100 --> 01:21:55,170
然后Y等于某个值 
and then Y equals some value.

1513
01:21:55,170 --> 01:21:59,340
然后障碍也是一回事 
And then obstacles is the same thing.

1514
01:21:59,340 --> 01:22:02,640
然后我们所要做的就是迭代这个级别的定义
And then all we do is just we iterate over this level definition

1515
01:22:02,640 --> 01:22:07,440
我们只是说 这里的每一张桌子都有新的外星人 
and we just say, new alien for every table here.

1516
01:22:07,440 --> 01:22:09,390
然后这里的每一张桌子都有了新的障碍 
And then new obstacle for every table in here.

1517
01:22:09,390 --> 01:22:11,640
然后现在你的水平是由数据驱动的 
And then now your levels are data driven.

1518
01:22:11,640 --> 01:22:13,260
只需调整级别就很容易了 
It's easy just to make levels.

1519
01:22:13,260 --> 01:22:15,134
你不需要编写代码 真的 很多 
You don't have to code, really, much.

1520
01:22:15,134 --> 01:22:16,800
你可以把它放在一个单独的文件里 
And you can put this in a separate file.

1521
01:22:16,800 --> 01:22:21,240
就像 关卡点缀Lua 然后一次只加载单独的关卡 
Be like, levels dot Lua, and then just load individual levels at a time.

1522
01:22:21,240 --> 01:22:28,020
级别1等于--级别将是顶级容器 
Level 1 equals-- levels would be the top level container.

1523
01:22:28,020 --> 01:22:33,720
然后你会得到1等于所有这些 然后是2
And then you would have 1 equals all of this, and then 2

1524
01:22:33,720 --> 01:22:36,004
等于另一个 3等于另一个 
equals another one, 3 equals another one.

1525
01:22:36,004 --> 01:22:37,920
然后你就不会真的编程那么多了
And then you're not really programming as much

1526
01:22:37,920 --> 01:22:40,170
因为你只是在数据中展示事物 
as you are just laying things out in data.

1527
01:22:40,170 --> 01:22:41,640
超级漂亮和简洁 
Super nice and concise.

1528
01:22:41,640 --> 01:22:44,980
这是像Lua这样的语言的一件好事 就是你可以 
That's a nice thing about a language like Lua, is that you can,

1529
01:22:44,980 --> 01:22:47,130
在JSON中的Java脚本中也是如此 
and it's the same thing in JavaScript with JSON,

1530
01:22:47,130 --> 01:22:50,970
您可以将事物定义为数据 然后编写
you can just define things as data and then write

1531
01:22:50,970 --> 01:22:54,630
一个脚本来遍历它并构建您实际相关的数据结构
a script to go over it and construct your actual relevant data structures

1532
01:22:54,630 --> 01:22:55,760
这样一来 
that way--

1533
01:22:55,760 --> 01:22:57,240
在您的代码中以这种方式 
in your code that way.

1534
01:22:57,240 --> 01:22:59,580
当你有了像我们现在这样的基础
When you have the foundation like we have now

1535
01:22:59,580 --> 01:23:02,340
在那里你可以从障碍和外星人的角度来思考 
where you can think in terms of obstacles and aliens,

1536
01:23:02,340 --> 01:23:04,650
您可以像这样构建关卡 
you can construct levels like so.

1537
01:23:04,650 --> 01:23:07,170
显然 你可以用这个做得更复杂 
And obviously you could go a lot more complicated with this.

1538
01:23:07,170 --> 01:23:14,280
我们所做的只是一些非常简单、几乎令人厌烦的静态障碍 
All we're doing is having very simple almost boring static obstacles.

1539
01:23:14,280 --> 01:23:17,280
它们在技术意义上不是静态的 因为它们是动态对象 
They're not static in a technical sense because they're dynamic objects,

1540
01:23:17,280 --> 01:23:21,520
但他们真正做的就是站在那里 然后摔倒 
but all they really do is just stand there and then fall over.

1541
01:23:21,520 --> 01:23:25,890
但如果你想要滑轮系统或者
But if you wanted a pulley system or maybe

1542
01:23:25,890 --> 01:23:29,520
一种被塑造成一个巨大的头部的东西 
something that's shaped in a giant head or something,

1543
01:23:29,520 --> 01:23:36,880
可以使用关节以这种方式创建任意复杂的对象 
you can create arbitrarily complex objects that way using joints.

1544
01:23:36,880 --> 01:23:40,050
如果你很好奇 我建议你去看看Love2D的文档
And if you're curious, I recommend to look into the documentation for Love2D

1545
01:23:40,050 --> 01:23:40,980
再多一点 
a little bit more.

1546
01:23:40,980 --> 01:23:44,340
尤其是他们的焊接接头是你会用到的
Especially their weld joints are what you would use

1547
01:23:44,340 --> 01:23:47,970
把碎片组合成任意形状 
to combine pieces in arbitrary shapes.

1548
01:23:47,970 --> 01:23:50,820
但你可以很容易地把这一点带到下一个层次
But you could easily take this to the next level

1549
01:23:50,820 --> 01:23:56,520
并开始在相同的层次定义中创建 任意形状 
and start to create in that same level definition, arbitrarily shaped,

1550
01:23:56,520 --> 01:24:01,495
把障碍物焊接在一起 
welded together obstacles.

1551
01:24:01,495 --> 01:24:03,870
但我认为 这将是下一步 如果你想
But that would be, I think, a next step if you're looking

1552
01:24:03,870 --> 01:24:06,990
让这一点超越一个层次 
to take this beyond just one level.

1553
01:24:06,990 --> 01:24:12,510
我会说 想一想 我如何才能让我的游戏世界得到展示
I would say, think in terms of, how can I get my game world represented

1554
01:24:12,510 --> 01:24:14,850
以一种非常简单的数据方式？
in a very simple data like way?

1555
01:24:14,850 --> 01:24:17,670
因为它不仅让您更容易创建内容 
Because not only does it make it easier for you to create content,

1556
01:24:17,670 --> 01:24:20,430
它允许你将负担转嫁给其他人
it allows you to shift that burden to somebody else

1557
01:24:20,430 --> 01:24:23,002
并允许您将创建关卡的任务交给
and allow you to give the task of creating levels

1558
01:24:23,002 --> 01:24:24,960
对程序员来说更少 对某人来说可能更多
less to a programmer and maybe more to somebody

1559
01:24:24,960 --> 01:24:28,290
他只有一个设计背景 对编写代码不是很在行 
who has just a design background who isn't as comfortable writing code.

1560
01:24:28,290 --> 01:24:31,920
并允许您创建引擎来构建基于
And allow you to create the engine that constructs the game world based off

1561
01:24:31,920 --> 01:24:34,440
这些数据 
of this data.

1562
01:24:34,440 --> 01:24:40,560
对我们是怎么安排的有什么问题吗？
Any questions as to how we've set things up here?

1563
01:24:40,560 --> 01:24:41,877
好的 
OK.

1564
01:24:41,877 --> 01:24:43,710
所以我们有了背景 我们有了背景 
So we have the ground, we have a background.

1565
01:24:43,710 --> 01:24:47,550
背景只是一个呈现静态图像的简单类
A background is just a simple class that renders a static image

1566
01:24:47,550 --> 01:24:49,860
你可以用左或右滚动图像 
that you can scroll the image with left or right,

1567
01:24:49,860 --> 01:24:51,930
但我们最终并不经常使用它 
but we don't end up using it much.

1568
01:24:51,930 --> 01:24:55,590
这与《愤怒的小鸟》相关 因为《愤怒的小鸟》里有摄像头 
It's relevant in Angry Birds because in Angry Birds they have a camera,

1569
01:24:55,590 --> 01:25:00,540
摄像机会根据距离从左到右摇摄
and the camera pans left to right depending on how far away

1570
01:25:00,540 --> 01:25:02,790
堡垒是从你的弹弓上射出的 
the fortress is from your sling shot.

1571
01:25:02,790 --> 01:25:06,660
所以如果你想要做实验的话 这就是你的想法 
So that's in there if you want to experiment with it at all,

1572
01:25:06,660 --> 01:25:08,160
并用一个移动的相机进行实验 
and experiment with a moving camera.

1573
01:25:08,160 --> 01:25:11,280
也许可以使用定时器点补间来补间相机
Maybe use timer dot tween to tween the camera

1574
01:25:11,280 --> 01:25:15,690
或者只是让它追踪外星人 如果你想要更大的世界 
or just to have it track the alien if you want larger worlds.

1575
01:25:15,690 --> 01:25:19,320
但我们在发行版中使用它的次数并不多 
But we don't end up using it in the distro as much.

1576
01:25:19,320 --> 01:25:20,890
我们的更新功能很简单 
Our update function is simple.

1577
01:25:20,890 --> 01:25:23,070
我们更新发射标志 更新世界 
We update the launch marker, update the world,

1578
01:25:23,070 --> 01:25:26,280
然后我们处理所有我们标记为已销毁的身体 
and then we process all the bodies that we flagged as being destroyed,

1579
01:25:26,280 --> 01:25:27,680
我们已经看到了这一点 
which we've already seen.

1580
01:25:27,680 --> 01:25:29,640
我们把被销毁的身体放在一张空桌子上
We reset destroyed bodies to an empty table

1581
01:25:29,640 --> 01:25:31,740
因为我们已经全部处理过了 
because we've processed all of them.

1582
01:25:31,740 --> 01:25:38,504
我们实际上把障碍物从我们的水平线上移走
We actually remove from our level the obstacle objects

1583
01:25:38,504 --> 01:25:40,670
所以它们不再被渲染 我们也不再
so that they're no longer rendered, and we no longer

1584
01:25:40,670 --> 01:25:44,650
试着参考那些被销毁的身体 
try to reference the bodies that are destroyed.

1585
01:25:44,650 --> 01:25:49,160
然后注意 当我们摧毁障碍物时 
And then notice here too, when we destroy the obstacle,

1586
01:25:49,160 --> 01:25:52,050
我们在这段代码中播放音效 
we're playing a sound effect inside this bit of code.

1587
01:25:52,050 --> 01:25:54,650
所以我们可以只做G音 
So we can just do g sounds.

1588
01:25:54,650 --> 01:25:57,260
我在里面放了五个木制音效 只是为了变化无常 
I put five wooden sound effects in there just for variability.

1589
01:25:57,260 --> 01:25:58,280
它会随机挑选一个 
It'll pick a random one.

1590
01:25:58,280 --> 01:26:00,650
然后用来串起数字 只需
And then using to string at the number, just

1591
01:26:00,650 --> 01:26:03,020
在这里创造一 二 三 四 五 
create break one, two, three, four, five here.

1592
01:26:03,020 --> 01:26:06,420
然后停下来播放它 
And then stop and play it.

1593
01:26:06,420 --> 01:26:07,197
这里也是一样 
Same thing here.

1594
01:26:07,197 --> 01:26:09,530
我有一种声音叫当我们消灭外星人时的杀戮 
I have a sound called kill for when we destroy an alien.

1595
01:26:09,530 --> 01:26:14,240
所以当我们将一个外星人标记为毁灭并将其从场景中移走时 
So when we flag an alien as destroyed and we remove it from the scene,

1596
01:26:14,240 --> 01:26:16,910
我们也应该称之为音效 
we should also call that sound effect.

1597
01:26:16,910 --> 01:26:27,050
然后如果外星人停止在我们的场景中移动 玩家 
And then if the alien stops moving in our scene, the player,

1598
01:26:27,050 --> 01:26:31,430
我们可以在这里找到它的参考 自助点发射标记点外星人 
we can get a reference to it here, self dot launch marker dot alien,

1599
01:26:31,430 --> 01:26:33,667
而不是我们场景中的任何外星人 
as opposed to any aliens in our scene.

1600
01:26:33,667 --> 01:26:36,125
当它停止运动时 我们就得到了它的平均速度
When it stops moving, so we get the average of its velocity

1601
01:26:36,125 --> 01:26:38,510
如果它低于1.5 那么就不是很完美
and if it's less than 1.5, so not perfectly

1602
01:26:38,510 --> 01:26:43,610
尽管如此 因为等待那么长时间是乏味的 但几乎还是如此 
still, because it's tedious to wait that long, but almost still,

1603
01:26:43,610 --> 01:26:48,950
我们摧毁外星人 然后创建一个新的发射标志 
we destroy the alien and then we create a new launch marker.

1604
01:26:48,950 --> 01:26:52,439
我们摧毁外星人 这样世界就不会再提及它
We destroy the alien so that the world doesn't keep a reference to it

1605
01:26:52,439 --> 01:26:54,230
然后我们只需创建一个全新的标记 
and then we just create a brand new marker,

1606
01:26:54,230 --> 01:27:00,530
它的作用是在我们重新启动时在那里实例化一个新的外星人 
which has the effect of instantiating a new alien there when we relaunch.

1607
01:27:00,530 --> 01:27:04,369
在这里 如果我们的场景中没有更多的外星人 
And then here, if there are no more aliens in our scene,

1608
01:27:04,369 --> 01:27:07,410
如果我们摧毁了所有的外星人 在这种情况下只有一个 
if we've destroyed all of the aliens, in this case there's only ever one,

1609
01:27:07,410 --> 01:27:09,800
但是 只要多做一点工作 就可以很容易地做到 
but there could easily, with a little more work,

1610
01:27:09,800 --> 01:27:13,040
在场景中再增加几个外星人 如果设置为零 
be a few more aliens in the scene, if it's set to zero,

1611
01:27:13,040 --> 01:27:14,630
然后回到起点 
then go back to the start.

1612
01:27:14,630 --> 01:27:18,160
当我们最终杀死外星人时我们看到了这一点 
Which we saw before when we finally killed the alien.

1613
01:27:18,160 --> 01:27:19,910
然后我们在这里所做的就是推迟
And then all we're doing here is deferring

1614
01:27:19,910 --> 01:27:26,090
渲染到我们要渲染的各个对象、启动标记、
rendering to the individual objects we want to render, the launch marker,

1615
01:27:26,090 --> 01:27:27,650
外星人 障碍 
the alien, the obstacle.

1616
01:27:27,650 --> 01:27:29,420
我们绘制地砖 
We render ground tiles.

1617
01:27:29,420 --> 01:27:34,070
回想一下 从我们之前的地面示例中 我们只使用了一行 
So recall, from our ground example before we were just using a line,

1618
01:27:34,070 --> 01:27:36,200
表示地面的边形状 
an edge shape to represent the ground.

1619
01:27:36,200 --> 01:27:44,630
但如果我们看看我们的比赛 这就有点难看出了 因为我是720 
But if we look at our game, it's a little hard to see because I'm in 720,

1620
01:27:44,630 --> 01:27:49,250
但实际上在底部有一块地砖 有一堆 
but there's actually a ground tile here at the very bottom, a bunch of them.

1621
01:27:49,250 --> 01:27:52,760
即使我们有所有的瓷砖 
And even though we have all of those tiles,

1622
01:27:52,760 --> 01:27:56,090
我们所做的只是检测碰撞的边缘形状 
all we're doing to detect collision is just an edge shape.

1623
01:27:56,090 --> 01:28:02,720
因此 我们所做的不仅仅是场景中的边缘形状 
So what we're doing is just beyond having the edge shape in our scene,

1624
01:28:02,720 --> 01:28:09,530
我们绘制该瓷砖 它是精灵工作表中的第12帧
we draw that tile, which is frame 12 in our sprite sheet

1625
01:28:09,530 --> 01:28:11,930
从负虚拟宽度到虚拟时间2 
from negative virtual width to virtual times 2.

1626
01:28:11,930 --> 01:28:13,850
所以总共有三个屏幕宽度 
So three screen widths total.

1627
01:28:13,850 --> 01:28:16,130
然后我们只需以35像素为增量
And then we just do it in increments of 35 pixels

1628
01:28:16,130 --> 01:28:17,630
因为这就是瓷砖的宽度 
because that's how wide the tile is.

1629
01:28:17,630 --> 01:28:19,856
这只会产生一堆相同的瓷砖
And that'll just create a bunch of the same tile

1630
01:28:19,856 --> 01:28:21,230
在我们屏幕的最底部 
at the very bottom of our screen.

1631
01:28:24,660 --> 01:28:28,130
所以只是一个图形化的东西 并不是真的有功能 
So just a graphical thing, not really necessarily functional.

1632
01:28:28,130 --> 01:28:31,190
我们的场景中已经有了边缘形状 但只是为了铺设地面
We have the edge shape already in our scene, but just to make the ground

1633
01:28:31,190 --> 01:28:35,540
看起来比一个像素高一点 
look a little larger than one pixel tall.

1634
01:28:35,540 --> 01:28:38,300
如果我们还没有发射任何东西 
And then if we haven't launched anything,

1635
01:28:38,300 --> 01:28:40,610
我们应该在这里显示一些说明 
we should display some instructions here.

1636
01:28:40,610 --> 01:28:45,050
然后如果我们没有外星人留下 那么我们
And then if we're at no aliens left, then we

1637
01:28:45,050 --> 01:28:47,570
应显示胜利屏幕 
should display the victory screen.

1638
01:28:47,570 --> 01:28:51,650
胜利的事情只会持续一小段时间 
And the victory thing will last for just a little bit of time,

1639
01:28:51,650 --> 01:28:55,370
因为即使自我点状的外星人是零 这一点代码
because even though self dot aliens is zero, this bit of code

1640
01:28:55,370 --> 01:28:59,840
直到我们移动的外星人的速度
doesn't register until after the velocity of our moving alien

1641
01:28:59,840 --> 01:29:01,520
减速到足够慢 
slows down sufficiently.

1642
01:29:01,520 --> 01:29:05,420
所以 当我们最终要停止移动时 这将会被调用 
So this will get called when we're just about to finally stop moving,

1643
01:29:05,420 --> 01:29:09,500
然后我们检查一下 哦 好的 我们真的没有外星人了吗？
and then we check to see, oh, OK, do we indeed have no aliens left?

1644
01:29:09,500 --> 01:29:12,380
如果不是 那么是时候回到起点了 
If not, time to go back to the start.

1645
01:29:12,380 --> 01:29:13,475
我们已经完成了一个关卡 
We've completed a level.

1646
01:29:13,475 --> 01:29:15,350
然后很明显你会改变这一点
And then you obviously would just change this

1647
01:29:15,350 --> 01:29:19,179
如果您最终实现了更多 则进入下一个级别
to go to be next level if you ended up implementing more

1648
01:29:19,179 --> 01:29:20,720
在你的游戏中只有一个级别 
levels in your game besides just one.

1649
01:29:23,600 --> 01:29:27,550
除此之外 这几乎就是本例中的所有代码 
Beyond that, that's pretty much all of the code that's in this example.

1650
01:29:27,550 --> 01:29:32,300
我想说 这是一个相当朴素的亲戚
It's fairly, I would say, unsophisticated relative

1651
01:29:32,300 --> 01:29:33,260
之前的例子 
to prior examples.

1652
01:29:33,260 --> 01:29:35,630
但主要的负担是学习如何使用
But mainly, the burden is learning how to use

1653
01:29:35,630 --> 01:29:38,960
物理引擎 Box2D物理引擎 它
the physics engine, the Box2D physics engine, which

1654
01:29:38,960 --> 01:29:42,240
本身就是相当多的函数 
itself is quite a few functions.

1655
01:29:42,240 --> 01:29:47,060
我认为这是Love2D维基上最长的文档 
It's some of the longest documentation on Love2D's wiki, I think.

1656
01:29:47,060 --> 01:29:50,270
但在我看来 这些原则非常简单 
But the principles are pretty simple, in my opinion.

1657
01:29:50,270 --> 01:29:54,905
我认为 有了很多很酷的功能 其实很容易上手 
I think it's actually quite easy to get rolling with a lot of cool features.

1658
01:29:57,617 --> 01:30:00,200
我认为我们甚至没有真正涵盖其中的绝大多数 
The vast majority of which I don't think we even really cover,

1659
01:30:00,200 --> 01:30:03,920
至少在可以对复合对象和关节执行的操作方面
at least in terms of what you can do with compound objects and joints

1660
01:30:03,920 --> 01:30:06,260
诸如此类的事情 真的开始
and things like that, which really start to go

1661
01:30:06,260 --> 01:30:12,260
进入更复杂、更有趣的物理模拟世界 
into the world of more sophisticated and interesting physical simulations.

1662
01:30:12,260 --> 01:30:16,130
就像我之前提到的滑轮和坦克之类的东西 
Things like I alluded to before, pulleys and tanks and other things like that.

1663
01:30:16,130 --> 01:30:19,580
一些我们可以考虑潜在扩展的功能
Some features that we could look at potentially expanding upon

1664
01:30:19,580 --> 01:30:21,920
如果我们想让我们的游戏更有趣 
if we wanted to make our game more interesting,

1665
01:30:21,920 --> 01:30:24,430
是为我们的对象提供更多的形状 
is more shapes for our objects.

1666
01:30:24,430 --> 01:30:28,280
所以 如果我们看一下这里的精灵图 我们
So if we look at our sprite sheet here, we

1667
01:30:28,280 --> 01:30:33,290
可以看到有屋顶和圆圈之类的东西 
can see there are things like roofs and circles and things like that.

1668
01:30:33,290 --> 01:30:36,710
所以除了正方形之外还有更多有趣的障碍
So more interesting obstacles beyond just square rectangular

1669
01:30:36,710 --> 01:30:37,590
有形状的障碍 
shaped obstacles.

1670
01:30:40,790 --> 01:30:44,540
回到--就像我之前说的 复合障碍 
Go back to-- like I said before, compound obstacles.

1671
01:30:44,540 --> 01:30:47,240
所以一堆东西通过关节组合在一起 
So a bunch of things put together via joints.

1672
01:30:47,240 --> 01:30:51,210
所以滑轮 有马达 焊接接头 你可以用来--你
So pulleys, there's motors, weld joints, which you can use to-- you

1673
01:30:51,210 --> 01:30:56,840
可以将屋顶固定在正方形上 然后将两块绑在一起 
can affix a roof to a square and then have two pieces that are tied together.

1674
01:30:56,840 --> 01:30:59,330
你可以制造出任意复杂和有形状的东西
And you can make arbitrarily complex and shaped things

1675
01:30:59,330 --> 01:31:01,010
而且真的很有趣 
and just be really interesting.

1676
01:31:01,010 --> 01:31:03,890
还有那个很大的东西 有这么多固定装置的身体 
And that big thing, that body with all these fixtures,

1677
01:31:03,890 --> 01:31:09,740
会发生碰撞 就像任何其他东西一样 这要归功于Box2D 
will collide just as any other thing would, thanks to Box2D.

1678
01:31:09,740 --> 01:31:13,670
正如我之前提到的 不是硬编码级别
As I alluded to before, instead of having levels to be hard coded

1679
01:31:13,670 --> 01:31:19,100
到我们的Level类中 也许可以在一个名为LevelsDot Lua的Lua文件中定义它们 
into our level class, maybe define them in a Lua file called levels dot Lua.

1680
01:31:19,100 --> 01:31:22,070
然后让外星人成为一张桌子 障碍
And then just have aliens be a table, obstacles

1681
01:31:22,070 --> 01:31:23,870
是一张桌子 然后是其他任何东西 然而
be a table, and then whatever else, however

1682
01:31:23,870 --> 01:31:25,869
你想用你的游戏变得更复杂 
more complicated you want to get with your game.

1683
01:31:25,869 --> 01:31:27,260
您可以添加更多内容 
You can add more things.

1684
01:31:27,260 --> 01:31:32,409
但只要将其表示为简单的数据结构即可 
But just have it be represented as simple data structures.

1685
01:31:32,409 --> 01:31:34,700
所以外星人可能有不同的射击机制 
So aliens that maybe have different shooting mechanics.

1686
01:31:34,700 --> 01:31:37,280
所以 如果你玩过《愤怒的小鸟》 你就会熟悉这样一个事实
So if you've played Angry Birds you're familiar with the fact

1687
01:31:37,280 --> 01:31:40,070
一些鸟会分裂成多只鸟 
that some birds will split off into multiple birds.

1688
01:31:40,070 --> 01:31:44,150
有些鸟会以超快的速度俯冲 冲破所有的障碍
Some birds will dive and go super fast and break through all the obstacles

1689
01:31:44,150 --> 01:31:45,290
挡在他们的道路上 
in their path.

1690
01:31:45,290 --> 01:31:48,020
一些鸟会爆炸 然后它们的爆炸
Some birds will explode, and then their explosion

1691
01:31:48,020 --> 01:31:50,610
影响他们周围的所有障碍物 
affects all of the obstacles around them.

1692
01:31:50,610 --> 01:31:52,970
所以有很多不同的游戏机制
So there's a lot of different game play mechanics

1693
01:31:52,970 --> 01:31:57,240
您可以使用不同类型的鸟类或外星人来实现 
you can implement using different types of birds or aliens.

1694
01:31:57,240 --> 01:32:01,670
然后 不同的障碍材料是我们可以尝试的另一个方向 
And then different obstacle materials is another direction we could go.

1695
01:32:01,670 --> 01:32:04,280
它开箱即用精灵薄片支撑
And it's supported out of the box with the sprite sheet

1696
01:32:04,280 --> 01:32:08,300
这是我提供的 因为它有金属板
that I provided because it has sheets for metal

1697
01:32:08,300 --> 01:32:10,080
玻璃和爆炸性材料 
and glass and explosive material.

1698
01:32:10,080 --> 01:32:12,080
所以有很多不同的有趣的东西
So there's a lot of different interesting things

1699
01:32:12,080 --> 01:32:15,800
你只需要改变你在游戏中使用的材料就可以了 
you could do just by changing up what materials you're using in the game.

1700
01:32:15,800 --> 01:32:19,250
显然 它们的密度不同 行为方式也不同 
And obviously those will have different densities and behave in different ways.

1701
01:32:19,250 --> 01:32:21,450
所以作业5是一个相当简单的作业 
So assignment five is a fairly simple assignment.

1702
01:32:21,450 --> 01:32:24,320
所以这就是我之前提到的 
So this is just as I alluded to before.

1703
01:32:24,320 --> 01:32:27,620
这里的任务是把你的鸟分成两半
The task here is to split the bird that you

1704
01:32:27,620 --> 01:32:31,850
当它在鸟的时候按空格键拍摄--外星人 当
shoot by pressing Spacebar when it's in the bird-- the alien, when

1705
01:32:31,850 --> 01:32:35,360
它在空中 按空格键并将其一分为三 
it's in the air, press Spacebar and have it split into three.

1706
01:32:35,360 --> 01:32:37,680
所以你已经有了一部你正在拍摄的电影 
So you have your one that you're shooting already.

1707
01:32:37,680 --> 01:32:39,470
所以它应该再发射两个 
So it should just shoot off two more.

1708
01:32:39,470 --> 01:32:41,600
一个角度更高 一个角度更低 
One that's angled higher, one that's angled lower.

1709
01:32:41,600 --> 01:32:45,945
所有这些都应该与你的游戏世界互动 
And all of those should be interactable with your game world.

1710
01:32:45,945 --> 01:32:46,820
真的是这样 
And that's really it.

1711
01:32:46,820 --> 01:32:48,944
因此 如果你能做到这一点 那么它将表明你知道
So if you can do that then it'll show that you know

1712
01:32:48,944 --> 01:32:52,580
如何影响Box2D游戏世界 
how to effect the Box2D game world.

1713
01:32:52,580 --> 01:32:55,574
下一次 下一堂课 我们将讨论--
Next time, next lecture, we'll be talking about--

1714
01:32:55,574 --> 01:32:57,365
主题将是精灵宝可梦 但我们将
the theme is going to be Pokemon, but we'll

1715
01:32:57,365 --> 01:33:03,057
更广泛地说 是RPG和基于回合的游戏 
be talking about more generally RPGs and turn-based games of that nature.

1716
01:33:03,057 --> 01:33:05,390
它可能不一定会看起来像这样漂亮 
It won't maybe necessarily look quite as pretty as this.

1717
01:33:05,390 --> 01:33:08,390
但我们将为类似的世界而努力
But we'll be striving for a similar over world

1718
01:33:08,390 --> 01:33:11,937
我们可以四处走动 然后进行相当简单的基于回合的战斗
that we can walk around and then engage in fairly simple turn-based battles

1719
01:33:11,937 --> 01:33:12,770
诸如此类的事情 
and stuff like that.

1720
01:33:12,770 --> 01:33:15,530
此外 我们还将讨论用户界面和其他东西
And also, we'll be talking about user interfaces and things

1721
01:33:15,530 --> 01:33:18,080
比如对话之类的东西 
like dialogue and stuff like that.

1722
01:33:18,080 --> 01:33:20,332
但第六课《愤怒的小鸟》到此为止 
But that was it for lecture six, Angry Birds.

1723
01:33:20,332 --> 01:33:21,290
下次见 
I'll see you next time.

1724
01:33:21,290 --> 01:33:23,140
谢谢 
Thank you.
